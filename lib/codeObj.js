// Generated by CoffeeScript 1.6.2
(function() {
  var BuiltinFunction, LogoFunction, Scope, ScopeChain, UserFunction, op, utils,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  op = require('./opcodes');

  utils = require('./utils');

  Scope = (function() {
    function Scope() {
      this.continueSlots = [];
      this.breakSlots = [];
    }

    return Scope;

  })();

  ScopeChain = (function() {
    function ScopeChain(codeObj) {
      this.codeObj = codeObj;
      this._chain = [];
    }

    ScopeChain.prototype.pushScope = function() {
      return this._chain.push(new Scope);
    };

    ScopeChain.prototype.popScope = function() {
      return this._chain.pop();
    };

    ScopeChain.prototype.patchContinue = function(label) {
      var top,
        _this = this;

      if (this._chain.length < 1) {
        throw new Error('No scope in chain');
      }
      top = this._chain[this._chain.length - 1];
      return top.continueSlots.forEach(function(slot) {
        return _this.codeObj._currentCode[slot] = label;
      });
    };

    ScopeChain.prototype.patchBreak = function(label) {
      var top,
        _this = this;

      if (this._chain.length < 1) {
        throw new Error('No scope in chain');
      }
      top = this._chain[this._chain.length - 1];
      return top.breakSlots.forEach(function(slot) {
        return _this.codeObj._currentCode[slot] = label;
      });
    };

    ScopeChain.prototype.addBreakSlot = function(slot) {
      var top;

      top = this._chain[this._chain.length - 1];
      return top.breakSlots.push(slot);
    };

    ScopeChain.prototype.addContinueSlot = function(slot) {
      var top;

      top = this._chain[this._chain.length - 1];
      return top.continueSlots.push(slot);
    };

    return ScopeChain;

  })();

  LogoFunction = (function() {
    function LogoFunction(name, argc) {
      this.name = name;
      this.argc = argc;
    }

    LogoFunction.prototype.invoke = function(args) {
      if (args.length !== this.argc) {
        throw new Error("" + name + "() takes exactly " + this.argc + " arguments (" + argc.length + " given)");
      }
    };

    return LogoFunction;

  })();

  BuiltinFunction = (function(_super) {
    __extends(BuiltinFunction, _super);

    function BuiltinFunction(name, argc, func) {
      this.func = func;
      BuiltinFunction.__super__.constructor.call(this, name, argc);
    }

    BuiltinFunction.prototype.invoke = function(args) {
      BuiltinFunction.__super__.invoke.call(this, args);
      return this.func.apply(null, args);
    };

    return BuiltinFunction;

  })(LogoFunction);

  UserFunction = (function(_super) {
    __extends(UserFunction, _super);

    function UserFunction(name, argc) {
      UserFunction.__super__.constructor.call(this, name, argc);
      this.code = [];
    }

    UserFunction.prototype.invoke = function(visitor, args) {
      UserFunction.__super__.invoke.call(this, args);
      return visitor(this.code, args);
    };

    return UserFunction;

  })(LogoFunction);

  this.BuiltinFunction = BuiltinFunction;

  this.UserFunction = UserFunction;

  this.CodeObject = (function() {
    function CodeObject(consts, globals, funcs, locals) {
      this.scopes = new ScopeChain(this);
      this.code = [];
      this._currentCode = this.code;
      this.consts = this._initConsts(consts);
      this.globalNames = this._initGlobalNames(globals);
      this.funcInfos = this._initFuncInfos(funcs);
      this.functions = [];
      this.localNames = this._initLocalNames(locals);
    }

    CodeObject.prototype.startFuncCode = function(funcNum) {
      var func;

      func = this.funcInfos[funcNum];
      this.functions[funcNum] = new UserFunction(func.name, func.argc);
      return this._currentCode = this.functions[funcNum].code;
    };

    CodeObject.prototype.endFuncCode = function(funcNum) {
      return this._currentCode = this.code;
    };

    CodeObject.prototype.addBuiltinFuncs = function(builtins) {
      return ([].splice.apply(this.functions, [0, builtins.length - 0].concat(builtins)), builtins);
    };

    CodeObject.prototype._initConsts = function(consts) {
      var x, _array, _i, _len, _results;

      _array = [];
      consts.forEach(function(obj, nr) {
        return _array.push([obj, nr]);
      });
      _array.sort(function(x, y) {
        return x[1] - y[1];
      });
      _results = [];
      for (_i = 0, _len = _array.length; _i < _len; _i++) {
        x = _array[_i];
        _results.push(x[0]);
      }
      return _results;
    };

    CodeObject.prototype._initGlobalNames = function(globals) {
      var x, _array, _i, _len, _results;

      _array = [];
      globals.forEach(function(name, ste) {
        return _array.push([name, ste.number]);
      });
      _array.sort(function(x, y) {
        return x[1] - y[1];
      });
      _results = [];
      for (_i = 0, _len = _array.length; _i < _len; _i++) {
        x = _array[_i];
        _results.push(x[0]);
      }
      return _results;
    };

    CodeObject.prototype._initFuncInfos = function(funcs) {
      var x, _array, _i, _len, _results;

      _array = [];
      funcs.forEach(function(name, fe) {
        return _array.push([fe.number, fe.argc, name]);
      });
      _array.sort(function(x, y) {
        return x[0] - y[0];
      });
      _results = [];
      for (_i = 0, _len = _array.length; _i < _len; _i++) {
        x = _array[_i];
        _results.push({
          name: x[2],
          argc: x[1]
        });
      }
      return _results;
    };

    CodeObject.prototype._initLocalNames = function(locals) {
      var k, v, x, _array, _localNames;

      _localNames = {};
      for (k in locals) {
        if (!__hasProp.call(locals, k)) continue;
        v = locals[k];
        _array = [];
        v.forEach(function(name, ste) {
          return _array.push([name, ste.number]);
        });
        _array.sort(function(x, y) {
          return x[1] - y[1];
        });
        _localNames[k] = (function() {
          var _i, _len, _results;

          _results = [];
          for (_i = 0, _len = _array.length; _i < _len; _i++) {
            x = _array[_i];
            _results.push(x[0]);
          }
          return _results;
        })();
      }
      return _localNames;
    };

    CodeObject.prototype.emit = function() {
      var bytecode, x, _i, _len, _results;

      bytecode = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      _results = [];
      for (_i = 0, _len = bytecode.length; _i < _len; _i++) {
        x = bytecode[_i];
        _results.push(this._currentCode.push(x));
      }
      return _results;
    };

    CodeObject.prototype._getOpName = function(opcode) {
      var name, num;

      for (name in op) {
        num = op[name];
        if (opcode === num) {
          return name;
        }
      }
    };

    CodeObject.prototype.dump = function() {
      var i, _funcName, _i, _ref, _results;

      this._dumpCode(this.code);
      utils.printf('\n');
      _results = [];
      for (i = _i = 0, _ref = this.functions.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (this.functions[i] instanceof UserFunction) {
          _funcName = this.functions[i].name;
          utils.printf('%s:\n', _funcName);
          this._dumpCode(this.functions[i].code, this.localNames[_funcName]);
          _results.push(utils.printf('\n'));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    CodeObject.prototype._dumpCode = function(code, localNames) {
      var i, len, opname, _const, _funcName, _globalName, _local, _results;

      if (localNames == null) {
        localNames = this.globalNames;
      }
      i = 0;
      len = code.length;
      _results = [];
      while (i < len) {
        opname = this._getOpName(code[i]);
        utils.printf('%-4d%-10s', i, opname);
        switch (opname) {
          case 'LDCONST':
            _const = this.consts[code[++i]];
            if (_const.constructor === String) {
              utils.printf("%d ('%s')", code[i], _const);
            } else {
              utils.printf("%d (%s)", code[i], _const);
            }
            break;
          case 'LDLOCAL':
          case 'STLOCAL':
          case 'DELLOCAL':
            if (localNames == null) {
              throw new Error("Invalid local var");
            }
            _local = localNames[code[++i]];
            utils.printf('%d (%s)', code[i], _local);
            break;
          case 'LDGLOBAL':
          case 'STGLOBAL':
          case 'DELGLOBAL':
            _globalName = this.globalNames[code[++i]];
            utils.printf('%d (%s)', code[i], _globalName);
            break;
          case 'CALL':
            _funcName = this.funcInfos[code[++i]].name;
            utils.printf('%d (%s)', code[i], _funcName);
            break;
          case 'JT':
          case 'JF':
          case 'JMP':
            utils.printf('%d', code[++i]);
        }
        utils.printf('\n');
        _results.push(i++);
      }
      return _results;
    };

    CodeObject.prototype.reserveSlot = function() {
      this.emit(0);
      return this._currentCode.length - 1;
    };

    CodeObject.prototype.genSlot = function() {
      return this._currentCode.length - 1;
    };

    CodeObject.prototype.patchSlot = function(slot, label) {
      return this._currentCode[slot] = label;
    };

    CodeObject.prototype.genLabel = function() {
      return this.genSlot();
    };

    CodeObject.prototype.peekLabel = function() {
      return this.genSlot() + 1;
    };

    return CodeObject;

  })();

}).call(this);
