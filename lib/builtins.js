// Generated by CoffeeScript 1.7.1
(function() {
  var Canvas, Turtle, deg2rad, getMathFuncs, rad2deg;

  Canvas = require('./canvas');

  deg2rad = Math.PI / 180;

  rad2deg = 180 / Math.PI;

  getMathFuncs = function(cb) {
    cb('abs', Math.abs, 1);
    cb('acos', (function(x) {
      return rad2deg * Math.acos(x);
    }), 1);
    cb('asin', (function(x) {
      return rad2deg * Math.asin(x);
    }), 1);
    cb('atan', (function(x) {
      return rad2deg * Math.atan(x);
    }), 1);
    cb('atan2', (function(y, x) {
      return rad2deg * Math.atan2(y, x);
    }), 2);
    cb('ceil', Math.ceil, 1);
    cb('cos', (function(x) {
      return Math.cos(x * deg2rad);
    }), 1);
    cb('exp', Math.exp, 1);
    cb('floor', Math.floor, 1);
    cb('log', Math.log, 1);
    cb('max', Math.max, 2);
    cb('min', Math.min, 2);
    cb('pow', Math.pow, 2);
    cb('random', Math.random, 0);
    cb('round', Math.round, 1);
    cb('sin', (function(x) {
      return Math.sin(x * deg2rad);
    }), 1);
    cb('sqrt', Math.sqrt, 1);
    return cb('tan', (function(x) {
      return Math.tan(x * deg2rad);
    }), 1);
  };

  this.getMathFuncs = getMathFuncs;

  Turtle = (function() {
    function Turtle(options) {
      var height, width;
      this._canvas = Canvas();
      this._ctx = this._canvas.getContext('2d');
      this._ctx.save();
      width = this._canvas.width;
      height = this._canvas.height;
      this._ctx.fillStyle = 'white';
      this._ctx.fillRect(-width / 2, -height / 2, width, height);
      this._ctx.restore();
      this._ctx.moveTo(0, 0);
      this._ctx.lineJoin = this._ctx.lineCap = 'round';
      this._posx = 0;
      this._posy = 0;
      this._heading = 0;
      this._isPenUp = false;
    }

    Turtle.prototype.fd = function(step) {
      var x, y;
      x = this._posx + step * Math.sin(this._heading / 180 * Math.PI);
      y = this._posy + step * Math.cos(this._heading / 180 * Math.PI);
      return this.setxy(x, y);
    };

    Turtle.prototype.bk = function(step) {
      var x, y;
      x = this._posx - step * Math.sin(this._heading / 180 * Math.PI);
      y = this._posy - step * Math.cos(this._heading / 180 * Math.PI);
      return this.setxy(x, y);
    };

    Turtle.prototype.lt = function(angle) {
      return this._heading -= angle;
    };

    Turtle.prototype.rt = function(angle) {
      return this._heading += angle;
    };

    Turtle.prototype.pu = function() {
      return this._isPenUp = true;
    };

    Turtle.prototype.pd = function() {
      return this._isPenUp = false;
    };

    Turtle.prototype.home = function() {
      this.setxy(0, 0);
      return this.seth(0);
    };

    Turtle.prototype.setx = function(x) {
      return this.setxy(x, this._posy);
    };

    Turtle.prototype.sety = function(y) {
      return this.setxy(this._posx, y);
    };

    Turtle.prototype.seth = function(angle) {
      return this._heading = angle;
    };

    Turtle.prototype.seth2 = function(x, y) {
      var dx, dy;
      dx = x - this._posx;
      dy = y - this._posy;
      return this._heading = 90 + rad2deg * Math.atan(dy, dx);
    };

    Turtle.prototype.geth = function() {
      return this._heading % 180;
    };

    Turtle.prototype.clear = function(c) {
      var h, w;
      w = this._canvas.width;
      h = this._canvas.height;
      this._ctx.save();
      this._ctx.fillStyle = c;
      this._ctx.fillRect(-(w / 2), -(h / 2), w, h);
      return this._ctx.restore();
    };

    Turtle.prototype.setxy = function(x, y) {
      if (!this._isPenUp) {
        this._ctx.beginPath();
        this._ctx.moveTo(this._posx, this._posy);
        this._ctx.lineTo(x, y);
        this._ctx.stroke();
      }
      this._posx = x;
      return this._posy = y;
    };

    Turtle.prototype.setpc = function(c) {
      this._ctx.strokeStyle = c;
      return this._ctx.fillStyle = c;
    };

    Turtle.prototype.setpw = function(w) {
      return this._ctx.lineWidth = w;
    };

    Turtle.prototype.text = function(t) {
      this._ctx.save();
      this._ctx.transform(1, 0, 0, -1, 0, 0);
      this._ctx.fillText(t, this._posx, this._posy);
      return this._ctx.restore();
    };

    Turtle.prototype.font = function(f) {
      return this._ctx.font = f;
    };

    Turtle.prototype.getFuncs = function(cb) {
      cb('fd', this.fd.bind(this), 1);
      cb('bk', this.bk.bind(this), 1);
      cb('lt', this.lt.bind(this), 1);
      cb('rt', this.rt.bind(this), 1);
      cb('pu', this.pu.bind(this), 0);
      cb('pd', this.pd.bind(this), 0);
      cb('home', this.home.bind(this), 0);
      cb('setx', this.setx.bind(this), 1);
      cb('sety', this.sety.bind(this), 1);
      cb('seth', this.seth.bind(this), 1);
      cb('seth2', this.seth2.bind(this), 2);
      cb('geth', this.geth.bind(this), 0);
      cb('setxy', this.setxy.bind(this), 2);
      cb('setpc', this.setpc.bind(this), 1);
      cb('setpw', this.setpw.bind(this), 1);
      return cb('clear', this.clear.bind(this), 1);
    };

    return Turtle;

  })();

  this.Turtle = Turtle;

}).call(this);
