// Generated by CoffeeScript 1.6.2
(function() {
  var Mixins, leaveResult, _binExpression, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Mixins = require('./utils').Mixins;

  leaveResult = {
    leaveResult: true
  };

  this.NumericLiteral = (function(_super) {
    __extends(NumericLiteral, _super);

    NumericLiteral.include(leaveResult);

    function NumericLiteral(value) {
      this.value = value;
    }

    NumericLiteral.prototype.accept = function(visitor) {
      return visitor.visitNumericLiteral(this);
    };

    return NumericLiteral;

  })(Mixins);

  this.StringLiteral = (function(_super) {
    __extends(StringLiteral, _super);

    StringLiteral.include(leaveResult);

    function StringLiteral(value) {
      this.value = value;
    }

    StringLiteral.prototype.accept = function(visitor) {
      return visitor.visitStringLiteral(this);
    };

    return StringLiteral;

  })(Mixins);

  this.NullLiteral = (function(_super) {
    __extends(NullLiteral, _super);

    function NullLiteral() {
      _ref = NullLiteral.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    NullLiteral.include(leaveResult);

    NullLiteral.prototype.accept = function(visitor) {
      return visitor.visitNullLiteral(this);
    };

    return NullLiteral;

  })(Mixins);

  this.BooleanLiteral = (function(_super) {
    __extends(BooleanLiteral, _super);

    BooleanLiteral.include(leaveResult);

    function BooleanLiteral(value) {
      this.value = value;
    }

    BooleanLiteral.prototype.accept = function(visitor) {
      return visitor.visitBooleanLiteral(this);
    };

    return BooleanLiteral;

  })(Mixins);

  this.Variable = (function(_super) {
    __extends(Variable, _super);

    Variable.include(leaveResult);

    function Variable(name) {
      this.name = name;
    }

    Variable.prototype.accept = function(visitor) {
      return visitor.visitVariable(this);
    };

    return Variable;

  })(Mixins);

  this.FunctionCall = (function(_super) {
    __extends(FunctionCall, _super);

    FunctionCall.include(leaveResult);

    function FunctionCall(name, args) {
      this.name = name;
      this["arguments"] = args;
    }

    FunctionCall.prototype.accept = function(visitor) {
      var arg, _i, _len, _ref1;

      _ref1 = this["arguments"];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        arg = _ref1[_i];
        arg.accept(visitor);
      }
      return visitor.visitFunctionCall(this);
    };

    return FunctionCall;

  })(Mixins);

  this.PostfixExpression = (function(_super) {
    __extends(PostfixExpression, _super);

    PostfixExpression.include(leaveResult);

    function PostfixExpression(operator, expression) {
      this.operator = operator;
      this.expression = expression;
    }

    PostfixExpression.prototype.accept = function(visitor) {
      this.expression.accept(visitor);
      return visitor.visitPostfixExpression(this);
    };

    return PostfixExpression;

  })(Mixins);

  this.UnaryExpression = (function(_super) {
    __extends(UnaryExpression, _super);

    UnaryExpression.include(leaveResult);

    function UnaryExpression(operator, expression) {
      this.operator = operator;
      this.expression = expression;
    }

    UnaryExpression.prototype.accept = function(visitor) {
      this.expression.accept(visitor);
      return visitor.visitUnaryExpression(this);
    };

    return UnaryExpression;

  })(Mixins);

  _binExpression = function(ctx, op, l, r) {
    ctx.operator = op;
    ctx.left = l;
    ctx.right = r;
  };

  this.BinaryExpression = (function(_super) {
    __extends(BinaryExpression, _super);

    BinaryExpression.include(leaveResult);

    function BinaryExpression(op, l, r) {
      _binExpression(this, op, l, r);
    }

    BinaryExpression.prototype.accept = function(visitor) {
      this.left.accept(visitor);
      this.right.accept(visitor);
      return visitor.visitBinaryExpression(this);
    };

    return BinaryExpression;

  })(Mixins);

  this.ConditionalExpression = (function(_super) {
    __extends(ConditionalExpression, _super);

    ConditionalExpression.include(leaveResult);

    function ConditionalExpression(condition, trueExpression, falseExpression) {
      this.condition = condition;
      this.trueExpression = trueExpression;
      this.falseExpression = falseExpression;
    }

    ConditionalExpression.prototype.accept = function(visitor) {
      this.condition.accept(visitor);
      this.trueExpression.accept(visitor);
      this.falseExpression.accept(visitor);
      return visitor.visitConditionalExpression(this);
    };

    return ConditionalExpression;

  })(Mixins);

  this.AssignmentExpression = (function(_super) {
    __extends(AssignmentExpression, _super);

    AssignmentExpression.include(leaveResult);

    function AssignmentExpression(op, l, r) {
      _binExpression(this, op, l, r);
    }

    AssignmentExpression.prototype.accept = function(visitor) {
      this.left.accept(visitor);
      this.right.accept(visitor);
      return visitor.visitAssignmentExpression(this);
    };

    return AssignmentExpression;

  })(Mixins);

  this.Block = (function(_super) {
    __extends(Block, _super);

    function Block(statements) {
      this.statements = statements;
    }

    Block.prototype.accept = function(visitor) {
      var stmt, _i, _len, _ref1;

      _ref1 = this.statements;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        stmt = _ref1[_i];
        stmt.accept(visitor);
      }
      return visitor.visitBlock(this);
    };

    return Block;

  })(Mixins);

  this.VariableStatement = (function(_super) {
    __extends(VariableStatement, _super);

    VariableStatement.include(leaveResult);

    function VariableStatement(declarations) {
      this.declarations = declarations;
    }

    VariableStatement.prototype.accept = function(visitor) {
      var decl, _i, _len, _ref1;

      _ref1 = this.declarations;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        decl = _ref1[_i];
        decl.accept(visitor);
      }
      return visitor.visitVariableStatement(this);
    };

    return VariableStatement;

  })(Mixins);

  this.VariableDeclaration = (function(_super) {
    __extends(VariableDeclaration, _super);

    VariableDeclaration.include(leaveResult);

    function VariableDeclaration(name, value) {
      this.name = name;
      this.value = value;
    }

    VariableDeclaration.prototype.accept = function(visitor) {
      this.value.accept(visitor);
      return visitor.visitVariableDeclaration(this);
    };

    return VariableDeclaration;

  })(Mixins);

  this.EmptyStatement = (function(_super) {
    __extends(EmptyStatement, _super);

    function EmptyStatement() {
      _ref1 = EmptyStatement.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    EmptyStatement.prototype.accept = function(visitor) {
      return visitor.visitEmptyStatement(this);
    };

    return EmptyStatement;

  })(Mixins);

  this.IfStatement = (function(_super) {
    __extends(IfStatement, _super);

    function IfStatement(condition, ifStatement, elseStatement) {
      this.condition = condition;
      this.ifStatement = ifStatement;
      this.elseStatement = elseStatement;
    }

    IfStatement.prototype.accept = function(visitor) {
      var _ref2;

      this.condition.accept(visitor);
      this.ifStatement.accept(visitor);
      if ((_ref2 = this.elseStatement) != null) {
        _ref2.accept(visitor);
      }
      return visitor.visitIfStatement(this);
    };

    return IfStatement;

  })(Mixins);

  this.DoWhileStatement = (function(_super) {
    __extends(DoWhileStatement, _super);

    function DoWhileStatement(condition, statement) {
      this.condition = condition;
      this.statement = statement;
    }

    DoWhileStatement.prototype.accept = function(visitor) {
      this.condition.accept(visitor);
      this.statement.accept(visitor);
      return visitor.visitDoWhileStatement(this);
    };

    return DoWhileStatement;

  })(Mixins);

  this.WhileStatement = (function(_super) {
    __extends(WhileStatement, _super);

    function WhileStatement(condition, statement) {
      this.condition = condition;
      this.statement = statement;
    }

    WhileStatement.prototype.accept = function(visitor) {
      this.condition.accept(visitor);
      this.statement.accept(visitor);
      return visitor.visitWhileStatement(this);
    };

    return WhileStatement;

  })(Mixins);

  this.ForStatement = (function(_super) {
    __extends(ForStatement, _super);

    function ForStatement(initializer, test, counter, statement) {
      this.initializer = initializer;
      this.test = test;
      this.counter = counter;
      this.statement = statement;
    }

    ForStatement.prototype.accept = function(visitor) {
      var _ref2, _ref3, _ref4;

      if ((_ref2 = this.initializer) != null) {
        _ref2.accept(visitor);
      }
      if ((_ref3 = this.test) != null) {
        _ref3.accept(visitor);
      }
      if ((_ref4 = this.counter) != null) {
        _ref4.accept(visitor);
      }
      this.statement.accept(visitor);
      return visitor.visitForStatement(this);
    };

    return ForStatement;

  })(Mixins);

  this.ContinueStatement = (function(_super) {
    __extends(ContinueStatement, _super);

    function ContinueStatement() {
      _ref2 = ContinueStatement.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    ContinueStatement.prototype.accept = function(visitor) {
      return visitor.visitContinueStatement(this);
    };

    return ContinueStatement;

  })(Mixins);

  this.BreakStatement = (function(_super) {
    __extends(BreakStatement, _super);

    function BreakStatement() {
      _ref3 = BreakStatement.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    BreakStatement.prototype.accept = function(visitor) {
      return visitor.visitBreakStatement(this);
    };

    return BreakStatement;

  })(Mixins);

  this.ReturnStatement = (function(_super) {
    __extends(ReturnStatement, _super);

    function ReturnStatement(value) {
      this.value = value;
    }

    ReturnStatement.prototype.accept = function(visitor) {
      var _ref4;

      if ((_ref4 = this.value) != null) {
        _ref4.accept(visitor);
      }
      return visitor.visitReturnStatement(this);
    };

    return ReturnStatement;

  })(Mixins);

  this.Function_ = (function(_super) {
    __extends(Function_, _super);

    function Function_(name, params, elements) {
      this.name = name;
      this.params = params;
      this.elements = elements;
    }

    Function_.prototype.accept = function(visitor) {
      var elem, _i, _len, _ref4;

      visitor.enter('Function_', this);
      visitor.visitParameters(this.params);
      _ref4 = this.elements;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        elem = _ref4[_i];
        elem.accept(visitor);
      }
      return visitor.visitFunction_(this);
    };

    return Function_;

  })(Mixins);

  this.Program = (function(_super) {
    __extends(Program, _super);

    function Program(elements) {
      this.elements = elements;
    }

    Program.prototype.accept = function(visitor) {
      var elem, _i, _len, _ref4;

      _ref4 = this.elements;
      for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
        elem = _ref4[_i];
        elem.accept(visitor);
      }
      return visitor.visitProgram(this);
    };

    return Program;

  })(Mixins);

}).call(this);
