// Generated by CoffeeScript 1.7.1
(function() {
  var ConstTable, FuncEntry, FuncTable, GlobalVars, LocalVars, SYM_FUNC, SYM_GLOBAL, SYM_LOCAL, SYM_NONE, SymTabEntry, SymTabSet, SymTable, _dictCount,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  SYM_NONE = 0;

  SYM_LOCAL = 1;

  SYM_GLOBAL = 2;

  SYM_FUNC = 3;

  this.SYM_NONE = SYM_NONE;

  this.SYM_LOCAL = SYM_LOCAL;

  this.SYM_GLOBAL = SYM_GLOBAL;

  this.SYM_FUNC = SYM_FUNC;

  _dictCount = function(obj) {
    return Object.keys(obj).length;
  };

  ConstTable = (function() {
    function ConstTable() {
      this._set = new (require('./utils').Hashtable);
    }

    ConstTable.prototype.contains = function(obj) {
      return this._set.containsKey(obj);
    };

    ConstTable.prototype.put = function(obj) {
      if (!this._set.containsKey(obj)) {
        this._set.put(obj, this._set.size());
      }
      return this._set.get(obj);
    };

    ConstTable.prototype.count = function() {
      return this._set.size();
    };

    ConstTable.prototype.get = function(obj) {
      return this._set.get(obj);
    };

    ConstTable.prototype.forEach = function(cb, ctx) {
      if (ctx == null) {
        ctx = this;
      }
      return this._set.each(function(k, nr) {
        return cb.call(ctx, k, nr);
      });
    };

    return ConstTable;

  })();

  SymTabEntry = (function() {
    function SymTabEntry(flag, number) {
      this.flag = flag;
      this.number = number;
    }

    return SymTabEntry;

  })();

  FuncEntry = (function() {
    function FuncEntry(flag, argc, number) {
      this.flag = flag;
      this.argc = argc;
      this.number = number;
    }

    return FuncEntry;

  })();

  SymTable = (function() {
    function SymTable() {
      this._dict = {};
    }

    SymTable.prototype._add = function(name, flag) {
      var ste;
      ste = new SymTabEntry(flag, this.count());
      return this._dict[name] = ste;
    };

    SymTable.prototype.count = function() {
      return _dictCount(this._dict);
    };

    SymTable.prototype.contains = function(name) {
      return name in this._dict;
    };

    SymTable.prototype.get = function(name) {
      return this._dict[name];
    };

    SymTable.prototype.forEach = function(cb, ctx) {
      var k, ste, _ref, _results;
      if (ctx == null) {
        ctx = this;
      }
      _ref = this._dict;
      _results = [];
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        ste = _ref[k];
        _results.push(cb.call(ctx, k, ste));
      }
      return _results;
    };

    return SymTable;

  })();

  GlobalVars = (function(_super) {
    __extends(GlobalVars, _super);

    function GlobalVars() {
      return GlobalVars.__super__.constructor.apply(this, arguments);
    }

    GlobalVars.prototype.add = function(name) {
      return this._add(name, SYM_GLOBAL);
    };

    return GlobalVars;

  })(SymTable);

  LocalVars = (function(_super) {
    __extends(LocalVars, _super);

    function LocalVars() {
      return LocalVars.__super__.constructor.apply(this, arguments);
    }

    LocalVars.prototype.add = function(name) {
      return this._add(name, SYM_LOCAL);
    };

    return LocalVars;

  })(SymTable);

  FuncTable = (function(_super) {
    __extends(FuncTable, _super);

    function FuncTable() {
      return FuncTable.__super__.constructor.apply(this, arguments);
    }

    FuncTable.prototype.add = function(name, argc) {
      var fe;
      fe = new FuncEntry(SYM_FUNC, argc, this.count());
      return this._dict[name] = fe;
    };

    return FuncTable;

  })(SymTable);

  SymTabSet = (function() {
    function SymTabSet() {
      this.globals = new GlobalVars();
      this.locals = {};
      this.consts = new ConstTable();
      this.funcs = new FuncTable();
      this.currentTab = this.globals;
    }

    SymTabSet.prototype.isGlobal = function(name) {
      return this.globals.contains(name);
    };

    SymTabSet.prototype.isFunc = function(name) {
      return this.funcs.contains(name);
    };

    SymTabSet.prototype.enter = function(table) {
      return this.currentTab = table;
    };

    SymTabSet.prototype.enterGlobal = function() {
      return this.currentTab = this.globals;
    };

    SymTabSet.prototype.addLocal = function(name) {
      var localTab;
      localTab = new LocalVars;
      this.locals[name] = localTab;
      return this.enter(localTab);
    };

    return SymTabSet;

  })();

  this.ConstTable = ConstTable;

  this.GlobalVars = GlobalVars;

  this.LocalVars = LocalVars;

  this.FuncTable = FuncTable;

  this.SymTabSet = SymTabSet;

  this.SymTabEntry = SymTabEntry;

}).call(this);
