// Generated by CoffeeScript 1.7.1
(function() {
  var builtins, codeGen, codeObject, logoVM, parser, registerBuiltins, symTab, tree;

  parser = require('./parser');

  tree = require('./tree');

  codeObject = require('./codeObj');

  codeGen = require('./codeGen');

  symTab = require('./symTable');

  logoVM = require('./vm');

  builtins = require('./builtins');

  this.VERSION = '0.1.0';

  registerBuiltins = function(funcTable, builtins) {
    var builtin, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = builtins.length; _i < _len; _i++) {
      builtin = builtins[_i];
      _results.push(funcTable.add(builtin.name, builtin.argc));
    }
    return _results;
  };

  this.run = function(src, options) {
    var builtinFuncs, codeGenerator, codeObj, parseTree, print, tabSet, turtle, turtleOpt, vm;
    if (options == null) {
      options = {};
    }
    parseTree = parser.parse(src);
    tabSet = new symTab.SymTabSet();
    builtinFuncs = [];
    print = new codeObject.BuiltinFunction('print', 1, console.log);
    builtinFuncs.push(print);
    builtins.getMathFuncs(function(name, func, argc) {
      var f;
      f = new codeObject.BuiltinFunction(name, argc, func);
      return builtinFuncs.push(f);
    });
    turtleOpt = {
      width: options.width,
      height: options.height,
      output: options.output,
      antialias: options.antialias
    };
    turtle = new builtins.Turtle(turtleOpt);
    turtle.getFuncs(function(name, func, argc) {
      var f;
      f = new codeObject.BuiltinFunction(name, argc, func);
      return builtinFuncs.push(f);
    });
    registerBuiltins(tabSet.funcs, builtinFuncs);
    parseTree.accept(new tree.FirstPassVisitor(tabSet));
    if (options.ast) {
      console.log(require('util').inspect(parseTree, false, null));
    }
    codeObj = new codeObject.CodeObject(tabSet.consts, tabSet.globals, tabSet.funcs, tabSet.locals);
    codeGenerator = codeGen.getGenerator(codeObj);
    parseTree.accept(new tree.SecondPassVisitor(codeGenerator));
    codeObj.addBuiltinFuncs(builtinFuncs);
    parseTree.genCode();
    if (options.dump) {
      codeObj.dump();
    }
    vm = new logoVM.LogoVM(codeObj);
    return vm.run();
  };

}).call(this);
