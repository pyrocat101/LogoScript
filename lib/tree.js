// Generated by CoffeeScript 1.7.1
(function() {
  var BaseASTVisitor, ast,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ast = require('./node');

  BaseASTVisitor = (function() {
    function BaseASTVisitor() {}

    BaseASTVisitor.prototype.visitNumericLiteral = function(node) {};

    BaseASTVisitor.prototype.visitStringLiteral = function(node) {};

    BaseASTVisitor.prototype.visitNullLiteral = function(node) {};

    BaseASTVisitor.prototype.visitBooleanLiteral = function(node) {};

    BaseASTVisitor.prototype.visitVariable = function(node) {};

    BaseASTVisitor.prototype.visitFunctionCall = function(node) {};

    BaseASTVisitor.prototype.visitPostfixExpression = function(node) {};

    BaseASTVisitor.prototype.visitUnaryExpression = function(node) {};

    BaseASTVisitor.prototype.visitBinaryExpression = function(node) {};

    BaseASTVisitor.prototype.visitConditionalExpression = function(node) {};

    BaseASTVisitor.prototype.visitAssignmentExpression = function(node) {};

    BaseASTVisitor.prototype.visitBlock = function(node) {};

    BaseASTVisitor.prototype.visitVariableStatement = function(node) {};

    BaseASTVisitor.prototype.visitVariableDeclaration = function(node) {};

    BaseASTVisitor.prototype.visitEmptyStatement = function(node) {};

    BaseASTVisitor.prototype.visitIfStatement = function(node) {};

    BaseASTVisitor.prototype.visitDoWhileStatement = function(node) {};

    BaseASTVisitor.prototype.visitWhileStatement = function(node) {};

    BaseASTVisitor.prototype.visitForStatement = function(node) {};

    BaseASTVisitor.prototype.visitContinueStatement = function(node) {};

    BaseASTVisitor.prototype.visitBreakStatement = function(node) {};

    BaseASTVisitor.prototype.visitReturnStatement = function(node) {};

    BaseASTVisitor.prototype.visitFunction_ = function(node) {};

    BaseASTVisitor.prototype.visitProgram = function(node) {};

    BaseASTVisitor.prototype.visitParameters = function(array) {};

    BaseASTVisitor.prototype.enter = function(nodeName, node) {
      var _name;
      return typeof this[_name = 'enter' + nodeName] === "function" ? this[_name](node) : void 0;
    };

    return BaseASTVisitor;

  })();

  this.FirstPassVisitor = (function(_super) {
    __extends(FirstPassVisitor, _super);

    function FirstPassVisitor(tabSet) {
      this.tabSet = tabSet;
    }

    FirstPassVisitor.prototype.enterFunction_ = function(node) {
      this.tabSet.addLocal(node.name);
      this.tabSet.funcs.add(node.name, node.params.length);
      return node.symInfo = this.tabSet.funcs.get(node.name);
    };

    FirstPassVisitor.prototype.visitNumericLiteral = function(node) {
      return node.constNum = this.tabSet.consts.put(node.value);
    };

    FirstPassVisitor.prototype.visitStringLiteral = function(node) {
      return node.constNum = this.tabSet.consts.put(node.value);
    };

    FirstPassVisitor.prototype.visitNullLiteral = function(node) {
      return node.constNum = this.tabSet.consts.put(node.value);
    };

    FirstPassVisitor.prototype.visitBooleanLiteral = function(node) {
      return node.constNum = this.tabSet.consts.put(node.value);
    };

    FirstPassVisitor.prototype.visitVariable = function(node) {
      if (!this.tabSet.currentTab.contains(node.name)) {
        if (!this.tabSet.isGlobal(node.name)) {
          throw new Error("undefined variable '" + node.name + "'");
        } else {
          return node.symInfo = this.tabSet.globals.get(node.name);
        }
      } else {
        return node.symInfo = this.tabSet.currentTab.get(node.name);
      }
    };

    FirstPassVisitor.prototype.visitFunctionCall = function(node) {
      if (!this.tabSet.funcs.contains(node.name)) {
        throw new Error("undefined function '" + node.name + "'");
      }
      return node.symInfo = this.tabSet.funcs.get(node.name);
    };

    FirstPassVisitor.prototype.visitVariableDeclaration = function(node) {
      if (!this.tabSet.currentTab.contains(node.name)) {
        if (!this.tabSet.isGlobal(node.name)) {
          this.tabSet.currentTab.add(node.name);
          node.symInfo = this.tabSet.currentTab.get(node.name);
        }
        node.symInfo = this.tabSet.globals.get(node.name);
      }
      return node.symInfo = this.tabSet.currentTab.get(node.name);
    };

    FirstPassVisitor.prototype.visitFunction_ = function(node) {
      return this.tabSet.enterGlobal();
    };

    FirstPassVisitor.prototype.visitParameters = function(array) {
      var param, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        param = array[_i];
        _results.push(this.tabSet.currentTab.add(param));
      }
      return _results;
    };

    return FirstPassVisitor;

  })(BaseASTVisitor);

  this.SecondPassVisitor = (function(_super) {
    __extends(SecondPassVisitor, _super);

    function SecondPassVisitor(gen) {
      this.gen = gen;
    }

    SecondPassVisitor.prototype.visitVariable = function(node) {
      return node.genCode = this.gen.genVariable;
    };

    SecondPassVisitor.prototype.visitNumericLiteral = function(node) {
      return node.genCode = this.gen.genLiteral;
    };

    SecondPassVisitor.prototype.visitStringLiteral = function(node) {
      return node.genCode = this.gen.genLiteral;
    };

    SecondPassVisitor.prototype.visitNullLiteral = function(node) {
      return node.genCode = this.gen.genLiteral;
    };

    SecondPassVisitor.prototype.visitBooleanLiteral = function(node) {
      return node.genCode = this.gen.genLiteral;
    };

    SecondPassVisitor.prototype.visitFunctionCall = function(node) {
      return node.genCode = this.gen.genFunctionCall;
    };

    SecondPassVisitor.prototype.visitPostfixExpression = function(node) {
      return node.genCode = this.gen.genPostfixExpression;
    };

    SecondPassVisitor.prototype.visitUnaryExpression = function(node) {
      return node.genCode = this.gen.genUnaryExpression;
    };

    SecondPassVisitor.prototype.visitBinaryExpression = function(node) {
      return node.genCode = this.gen.genBinaryExpression;
    };

    SecondPassVisitor.prototype.visitConditionalExpression = function(node) {
      return node.genCode = this.gen.genConditionalExpression;
    };

    SecondPassVisitor.prototype.visitAssignmentExpression = function(node) {
      return node.genCode = this.gen.genAssignmentExpression;
    };

    SecondPassVisitor.prototype.visitBlock = function(node) {
      return node.genCode = this.gen.genBlock;
    };

    SecondPassVisitor.prototype.visitVariableStatement = function(node) {
      return node.genCode = this.gen.genVariableStatement;
    };

    SecondPassVisitor.prototype.visitVariableDeclaration = function(node) {
      return node.genCode = this.gen.genVariableDeclaration;
    };

    SecondPassVisitor.prototype.visitEmptyStatement = function(node) {
      return node.genCode = this.gen.genEmptyStatement;
    };

    SecondPassVisitor.prototype.visitIfStatement = function(node) {
      return node.genCode = this.gen.genIfStatement;
    };

    SecondPassVisitor.prototype.visitDoWhileStatement = function(node) {
      return node.genCode = this.gen.genDoWhileStatement;
    };

    SecondPassVisitor.prototype.visitWhileStatement = function(node) {
      return node.genCode = this.gen.genWhileStatement;
    };

    SecondPassVisitor.prototype.visitForStatement = function(node) {
      return node.genCode = this.gen.genForStatement;
    };

    SecondPassVisitor.prototype.visitContinueStatement = function(node) {
      return node.genCode = this.gen.genContinueStatement;
    };

    SecondPassVisitor.prototype.visitBreakStatement = function(node) {
      return node.genCode = this.gen.genBreakStatement;
    };

    SecondPassVisitor.prototype.visitReturnStatement = function(node) {
      return node.genCode = this.gen.genReturnStatement;
    };

    SecondPassVisitor.prototype.visitFunction_ = function(node) {
      return node.genCode = this.gen.genFunction;
    };

    SecondPassVisitor.prototype.visitProgram = function(node) {
      return node.genCode = this.gen.genProgram;
    };

    return SecondPassVisitor;

  })(BaseASTVisitor);

}).call(this);
