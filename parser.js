module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "AdditiveExpression": parse_AdditiveExpression,
        "AdditiveOperator": parse_AdditiveOperator,
        "AlphaLetter": parse_AlphaLetter,
        "ArgumentList": parse_ArgumentList,
        "Arguments": parse_Arguments,
        "AssignmentExpression": parse_AssignmentExpression,
        "AssignmentOperator": parse_AssignmentOperator,
        "BitwiseANDExpression": parse_BitwiseANDExpression,
        "BitwiseANDOperator": parse_BitwiseANDOperator,
        "BitwiseORExpression": parse_BitwiseORExpression,
        "BitwiseOROperator": parse_BitwiseOROperator,
        "BitwiseXORExpression": parse_BitwiseXORExpression,
        "BitwiseXOROperator": parse_BitwiseXOROperator,
        "Block": parse_Block,
        "BooleanLiteral": parse_BooleanLiteral,
        "BreakStatement": parse_BreakStatement,
        "BreakToken": parse_BreakToken,
        "CallExpression": parse_CallExpression,
        "CharacterEscapeSequence": parse_CharacterEscapeSequence,
        "Comment": parse_Comment,
        "ConditionalExpression": parse_ConditionalExpression,
        "ContinueStatement": parse_ContinueStatement,
        "ContinueToken": parse_ContinueToken,
        "DecimalDigit": parse_DecimalDigit,
        "DecimalDigits": parse_DecimalDigits,
        "DecimalIntegerLiteral": parse_DecimalIntegerLiteral,
        "DecimalLiteral": parse_DecimalLiteral,
        "DeleteToken": parse_DeleteToken,
        "DoToken": parse_DoToken,
        "DoWhileStatement": parse_DoWhileStatement,
        "DoubleStringCharacter": parse_DoubleStringCharacter,
        "DoubleStringCharacters": parse_DoubleStringCharacters,
        "EOF": parse_EOF,
        "EOS": parse_EOS,
        "EOSNoLineTerminator": parse_EOSNoLineTerminator,
        "ElseToken": parse_ElseToken,
        "EmptyStatement": parse_EmptyStatement,
        "EqualityExpression": parse_EqualityExpression,
        "EqualityOperator": parse_EqualityOperator,
        "EscapeCharacter": parse_EscapeCharacter,
        "EscapeSequence": parse_EscapeSequence,
        "ExponentIndicator": parse_ExponentIndicator,
        "ExponentPart": parse_ExponentPart,
        "Expression": parse_Expression,
        "ExpressionStatement": parse_ExpressionStatement,
        "FalseToken": parse_FalseToken,
        "ForStatement": parse_ForStatement,
        "ForToken": parse_ForToken,
        "FormalParameterList": parse_FormalParameterList,
        "FunctionBody": parse_FunctionBody,
        "FunctionDeclaration": parse_FunctionDeclaration,
        "FunctionToken": parse_FunctionToken,
        "HexDigit": parse_HexDigit,
        "HexEscapeSequence": parse_HexEscapeSequence,
        "HexIntegerLiteral": parse_HexIntegerLiteral,
        "Identifier": parse_Identifier,
        "IdentifierName": parse_IdentifierName,
        "IdentifierPart": parse_IdentifierPart,
        "IdentifierStart": parse_IdentifierStart,
        "IfStatement": parse_IfStatement,
        "IfToken": parse_IfToken,
        "Initialiser": parse_Initialiser,
        "IterationStatement": parse_IterationStatement,
        "Keyword": parse_Keyword,
        "LeftHandSideExpression": parse_LeftHandSideExpression,
        "LineContinuation": parse_LineContinuation,
        "LineTerminator": parse_LineTerminator,
        "LineTerminatorSequence": parse_LineTerminatorSequence,
        "Literal": parse_Literal,
        "LogicalANDExpression": parse_LogicalANDExpression,
        "LogicalANDOperator": parse_LogicalANDOperator,
        "LogicalORExpression": parse_LogicalORExpression,
        "LogicalOROperator": parse_LogicalOROperator,
        "MultiLineComment": parse_MultiLineComment,
        "MultiLineCommentNoLineTerminator": parse_MultiLineCommentNoLineTerminator,
        "MultiplicativeExpression": parse_MultiplicativeExpression,
        "MultiplicativeOperator": parse_MultiplicativeOperator,
        "NonEscapeCharacter": parse_NonEscapeCharacter,
        "NonZeroDigit": parse_NonZeroDigit,
        "NullLiteral": parse_NullLiteral,
        "NullToken": parse_NullToken,
        "NumericLiteral": parse_NumericLiteral,
        "PostfixExpression": parse_PostfixExpression,
        "PostfixOperator": parse_PostfixOperator,
        "PrimaryExpression": parse_PrimaryExpression,
        "Program": parse_Program,
        "RelationalExpression": parse_RelationalExpression,
        "RelationalOperator": parse_RelationalOperator,
        "ReservedWord": parse_ReservedWord,
        "ReturnStatement": parse_ReturnStatement,
        "ReturnToken": parse_ReturnToken,
        "ShiftExpression": parse_ShiftExpression,
        "ShiftOperator": parse_ShiftOperator,
        "SignedInteger": parse_SignedInteger,
        "SingleEscapeCharacter": parse_SingleEscapeCharacter,
        "SingleLineComment": parse_SingleLineComment,
        "SingleStringCharacter": parse_SingleStringCharacter,
        "SingleStringCharacters": parse_SingleStringCharacters,
        "SourceCharacter": parse_SourceCharacter,
        "SourceElement": parse_SourceElement,
        "SourceElements": parse_SourceElements,
        "Statement": parse_Statement,
        "StatementList": parse_StatementList,
        "StepToken": parse_StepToken,
        "StringLiteral": parse_StringLiteral,
        "ToToken": parse_ToToken,
        "TrueToken": parse_TrueToken,
        "TypeofToken": parse_TypeofToken,
        "UnaryExpression": parse_UnaryExpression,
        "UnaryOperator": parse_UnaryOperator,
        "UnicodeEscapeSequence": parse_UnicodeEscapeSequence,
        "VariableDeclaration": parse_VariableDeclaration,
        "VariableDeclarationList": parse_VariableDeclarationList,
        "VariableStatement": parse_VariableStatement,
        "WhileStatement": parse_WhileStatement,
        "WhileToken": parse_WhileToken,
        "WhiteSpace": parse_WhiteSpace,
        "_": parse__,
        "__": parse___,
        "start": parse_start
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var cacheKey = 'start@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse___();
        if (result3 !== null) {
          var result4 = parse_Program();
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(program) { return program; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SourceCharacter() {
        var cacheKey = 'SourceCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhiteSpace() {
        var cacheKey = 'WhiteSpace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[	 ]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[	 ]");
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LineTerminator() {
        var cacheKey = 'LineTerminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[\n\r\u2028\u2029]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\n\\r\\u2028\\u2029]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LineTerminatorSequence() {
        var cacheKey = 'LineTerminatorSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "\n") {
          var result5 = "\n";
          pos += 1;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\n\"");
          }
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          if (input.substr(pos, 2) === "\r\n") {
            var result4 = "\r\n";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\r\\n\"");
            }
          }
          if (result4 !== null) {
            var result0 = result4;
          } else {
            if (input.substr(pos, 1) === "\r") {
              var result3 = "\r";
              pos += 1;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\r\"");
              }
            }
            if (result3 !== null) {
              var result0 = result3;
            } else {
              if (input.substr(pos, 1) === "\u2028") {
                var result2 = "\u2028";
                pos += 1;
              } else {
                var result2 = null;
                if (reportMatchFailures) {
                  matchFailed("\"\\u2028\"");
                }
              }
              if (result2 !== null) {
                var result0 = result2;
              } else {
                if (input.substr(pos, 1) === "\u2029") {
                  var result1 = "\u2029";
                  pos += 1;
                } else {
                  var result1 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"\\u2029\"");
                  }
                }
                if (result1 !== null) {
                  var result0 = result1;
                } else {
                  var result0 = null;;
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("end of line");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Comment() {
        var cacheKey = 'Comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_MultiLineComment();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_SingleLineComment();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiLineComment() {
        var cacheKey = 'MultiLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result1 = "/*";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result7 = "*/";
            pos += 2;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result6 = parse_SourceCharacter();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result7 = "*/";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result6 = parse_SourceCharacter();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result3 = "*/";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiLineCommentNoLineTerminator() {
        var cacheKey = 'MultiLineCommentNoLineTerminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result1 = "/*";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result9 = "*/";
            pos += 2;
          } else {
            var result9 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result8 = parse_LineTerminator();
            if (result8 !== null) {
              var result7 = result8;
            } else {
              var result7 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            var result6 = parse_SourceCharacter();
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result9 = "*/";
              pos += 2;
            } else {
              var result9 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result9 !== null) {
              var result7 = result9;
            } else {
              var result8 = parse_LineTerminator();
              if (result8 !== null) {
                var result7 = result8;
              } else {
                var result7 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result6 = parse_SourceCharacter();
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result3 = "*/";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleLineComment() {
        var cacheKey = 'SingleLineComment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result1 = "//";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_LineTerminator();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse_SourceCharacter();
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_LineTerminator();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              var result5 = parse_SourceCharacter();
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Identifier() {
        var cacheKey = 'Identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result5 = parse_ReservedWord();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result5 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          var result4 = parse_IdentifierName();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name) { return name; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdentifierName() {
        var cacheKey = 'IdentifierName@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IdentifierStart();
        if (result3 !== null) {
          var result4 = [];
          var result5 = parse_IdentifierPart();
          while (result5 !== null) {
            result4.push(result5);
            var result5 = parse_IdentifierPart();
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, parts) {
                return start + parts.join("");
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdentifierStart() {
        var cacheKey = 'IdentifierStart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_AlphaLetter();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 1) === "$") {
            var result2 = "$";
            pos += 1;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\"$\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 1) === "_") {
              var result1 = "_";
              pos += 1;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\"_\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IdentifierPart() {
        var cacheKey = 'IdentifierPart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_IdentifierStart();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_DecimalDigit();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AlphaLetter() {
        var cacheKey = 'AlphaLetter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[a-zA-Z]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[a-zA-Z]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReservedWord() {
        var cacheKey = 'ReservedWord@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_Keyword();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_NullLiteral();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_BooleanLiteral();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Keyword() {
        var cacheKey = 'Keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "break") {
          var result17 = "break";
          pos += 5;
        } else {
          var result17 = null;
          if (reportMatchFailures) {
            matchFailed("\"break\"");
          }
        }
        if (result17 !== null) {
          var result1 = result17;
        } else {
          if (input.substr(pos, 8) === "continue") {
            var result16 = "continue";
            pos += 8;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"continue\"");
            }
          }
          if (result16 !== null) {
            var result1 = result16;
          } else {
            if (input.substr(pos, 6) === "delete") {
              var result15 = "delete";
              pos += 6;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"delete\"");
              }
            }
            if (result15 !== null) {
              var result1 = result15;
            } else {
              if (input.substr(pos, 2) === "do") {
                var result14 = "do";
                pos += 2;
              } else {
                var result14 = null;
                if (reportMatchFailures) {
                  matchFailed("\"do\"");
                }
              }
              if (result14 !== null) {
                var result1 = result14;
              } else {
                if (input.substr(pos, 4) === "else") {
                  var result13 = "else";
                  pos += 4;
                } else {
                  var result13 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"else\"");
                  }
                }
                if (result13 !== null) {
                  var result1 = result13;
                } else {
                  if (input.substr(pos, 3) === "for") {
                    var result12 = "for";
                    pos += 3;
                  } else {
                    var result12 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"for\"");
                    }
                  }
                  if (result12 !== null) {
                    var result1 = result12;
                  } else {
                    if (input.substr(pos, 8) === "function") {
                      var result11 = "function";
                      pos += 8;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"function\"");
                      }
                    }
                    if (result11 !== null) {
                      var result1 = result11;
                    } else {
                      if (input.substr(pos, 2) === "if") {
                        var result10 = "if";
                        pos += 2;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"if\"");
                        }
                      }
                      if (result10 !== null) {
                        var result1 = result10;
                      } else {
                        if (input.substr(pos, 2) === "in") {
                          var result9 = "in";
                          pos += 2;
                        } else {
                          var result9 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"in\"");
                          }
                        }
                        if (result9 !== null) {
                          var result1 = result9;
                        } else {
                          if (input.substr(pos, 6) === "return") {
                            var result8 = "return";
                            pos += 6;
                          } else {
                            var result8 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"return\"");
                            }
                          }
                          if (result8 !== null) {
                            var result1 = result8;
                          } else {
                            if (input.substr(pos, 6) === "typeof") {
                              var result7 = "typeof";
                              pos += 6;
                            } else {
                              var result7 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"typeof\"");
                              }
                            }
                            if (result7 !== null) {
                              var result1 = result7;
                            } else {
                              if (input.substr(pos, 5) === "while") {
                                var result6 = "while";
                                pos += 5;
                              } else {
                                var result6 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"while\"");
                                }
                              }
                              if (result6 !== null) {
                                var result1 = result6;
                              } else {
                                if (input.substr(pos, 2) === "to") {
                                  var result5 = "to";
                                  pos += 2;
                                } else {
                                  var result5 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"to\"");
                                  }
                                }
                                if (result5 !== null) {
                                  var result1 = result5;
                                } else {
                                  if (input.substr(pos, 4) === "step") {
                                    var result4 = "step";
                                    pos += 4;
                                  } else {
                                    var result4 = null;
                                    if (reportMatchFailures) {
                                      matchFailed("\"step\"");
                                    }
                                  }
                                  if (result4 !== null) {
                                    var result1 = result4;
                                  } else {
                                    var result1 = null;;
                                  };
                                };
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Literal() {
        var cacheKey = 'Literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result8 = parse_NullLiteral();
        if (result8 !== null) {
          var result0 = result8;
        } else {
          var result7 = parse_BooleanLiteral();
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos1 = pos;
            var result5 = parse_NumericLiteral();
            var result6 = result5 !== null
              ? (function(value) {
                    return {
                      type:  "NumericLiteral",
                      value: value
                    };
                  })(result5)
              : null;
            if (result6 !== null) {
              var result4 = result6;
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse_StringLiteral();
              var result3 = result2 !== null
                ? (function(value) {
                      return {
                        type:  "StringLiteral",
                        value: value
                      };
                    })(result2)
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NullLiteral() {
        var cacheKey = 'NullLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result1 = parse_NullToken();
        var result2 = result1 !== null
          ? (function() { return { type: "NullLiteral" }; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BooleanLiteral() {
        var cacheKey = 'BooleanLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos1 = pos;
        var result5 = parse_TrueToken();
        var result6 = result5 !== null
          ? (function() { return { type: "BooleanLiteral", value: true  }; })()
          : null;
        if (result6 !== null) {
          var result4 = result6;
        } else {
          var result4 = null;
          pos = savedPos1;
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var savedPos0 = pos;
          var result2 = parse_FalseToken();
          var result3 = result2 !== null
            ? (function() { return { type: "BooleanLiteral", value: false }; })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NumericLiteral() {
        var cacheKey = 'NumericLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result7 = parse_HexIntegerLiteral();
        if (result7 !== null) {
          var result3 = result7;
        } else {
          var result6 = parse_DecimalLiteral();
          if (result6 !== null) {
            var result3 = result6;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_IdentifierStart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(literal) {
                return literal;
              })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("number");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DecimalLiteral() {
        var cacheKey = 'DecimalLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var savedPos5 = pos;
        var result17 = parse_DecimalIntegerLiteral();
        if (result17 !== null) {
          if (input.substr(pos, 1) === ".") {
            var result18 = ".";
            pos += 1;
          } else {
            var result18 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result18 !== null) {
            var result22 = parse_DecimalDigits();
            var result19 = result22 !== null ? result22 : '';
            if (result19 !== null) {
              var result21 = parse_ExponentPart();
              var result20 = result21 !== null ? result21 : '';
              if (result20 !== null) {
                var result15 = [result17, result18, result19, result20];
              } else {
                var result15 = null;
                pos = savedPos5;
              }
            } else {
              var result15 = null;
              pos = savedPos5;
            }
          } else {
            var result15 = null;
            pos = savedPos5;
          }
        } else {
          var result15 = null;
          pos = savedPos5;
        }
        var result16 = result15 !== null
          ? (function(before, after, exponent) {
                return parseFloat(before + "." + after + exponent);
              })(result15[0], result15[2], result15[3])
          : null;
        if (result16 !== null) {
          var result14 = result16;
        } else {
          var result14 = null;
          pos = savedPos4;
        }
        if (result14 !== null) {
          var result0 = result14;
        } else {
          var savedPos2 = pos;
          var savedPos3 = pos;
          if (input.substr(pos, 1) === ".") {
            var result10 = ".";
            pos += 1;
          } else {
            var result10 = null;
            if (reportMatchFailures) {
              matchFailed("\".\"");
            }
          }
          if (result10 !== null) {
            var result11 = parse_DecimalDigits();
            if (result11 !== null) {
              var result13 = parse_ExponentPart();
              var result12 = result13 !== null ? result13 : '';
              if (result12 !== null) {
                var result8 = [result10, result11, result12];
              } else {
                var result8 = null;
                pos = savedPos3;
              }
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          var result9 = result8 !== null
            ? (function(after, exponent) {
                  return parseFloat("." + after + exponent);
                })(result8[1], result8[2])
            : null;
          if (result9 !== null) {
            var result7 = result9;
          } else {
            var result7 = null;
            pos = savedPos2;
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            var result4 = parse_DecimalIntegerLiteral();
            if (result4 !== null) {
              var result6 = parse_ExponentPart();
              var result5 = result6 !== null ? result6 : '';
              if (result5 !== null) {
                var result2 = [result4, result5];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(before, exponent) {
                    return parseFloat(before + exponent);
                  })(result2[0], result2[1])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DecimalIntegerLiteral() {
        var cacheKey = 'DecimalIntegerLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 1) === "0") {
          var result7 = "0";
          pos += 1;
        } else {
          var result7 = null;
          if (reportMatchFailures) {
            matchFailed("\"0\"");
          }
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_NonZeroDigit();
          if (result4 !== null) {
            var result6 = parse_DecimalDigits();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(digit, digits) { return digit + digits; })(result2[0], result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DecimalDigits() {
        var cacheKey = 'DecimalDigits@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_DecimalDigit();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_DecimalDigit();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(digits) { return digits.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DecimalDigit() {
        var cacheKey = 'DecimalDigit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NonZeroDigit() {
        var cacheKey = 'NonZeroDigit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[1-9]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[1-9]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExponentPart() {
        var cacheKey = 'ExponentPart@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ExponentIndicator();
        if (result3 !== null) {
          var result4 = parse_SignedInteger();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(indicator, integer) {
                return indicator + integer;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExponentIndicator() {
        var cacheKey = 'ExponentIndicator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[eE]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[eE]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SignedInteger() {
        var cacheKey = 'SignedInteger@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos).match(/^[\-+]/) !== null) {
          var result5 = input.charAt(pos);
          pos++;
        } else {
          var result5 = null;
          if (reportMatchFailures) {
            matchFailed("[\\-+]");
          }
        }
        var result3 = result5 !== null ? result5 : '';
        if (result3 !== null) {
          var result4 = parse_DecimalDigits();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(sign, digits) { return sign + digits; })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HexIntegerLiteral() {
        var cacheKey = 'HexIntegerLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "0") {
          var result3 = "0";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"0\"");
          }
        }
        if (result3 !== null) {
          if (input.substr(pos).match(/^[xX]/) !== null) {
            var result4 = input.charAt(pos);
            pos++;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("[xX]");
            }
          }
          if (result4 !== null) {
            var result6 = parse_HexDigit();
            if (result6 !== null) {
              var result5 = [];
              while (result6 !== null) {
                result5.push(result6);
                var result6 = parse_HexDigit();
              }
            } else {
              var result5 = null;
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(digits) { return parseInt("0x" + digits.join("")); })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HexDigit() {
        var cacheKey = 'HexDigit@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos).match(/^[0-9a-fA-F]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9a-fA-F]");
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StringLiteral() {
        var cacheKey = 'StringLiteral@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos2 = pos;
        if (input.substr(pos, 1) === "\"") {
          var result9 = "\"";
          pos += 1;
        } else {
          var result9 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result9 !== null) {
          var result12 = parse_DoubleStringCharacters();
          var result10 = result12 !== null ? result12 : '';
          if (result10 !== null) {
            if (input.substr(pos, 1) === "\"") {
              var result11 = "\"";
              pos += 1;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result11 !== null) {
              var result8 = [result9, result10, result11];
            } else {
              var result8 = null;
              pos = savedPos2;
            }
          } else {
            var result8 = null;
            pos = savedPos2;
          }
        } else {
          var result8 = null;
          pos = savedPos2;
        }
        if (result8 !== null) {
          var result1 = result8;
        } else {
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "'") {
            var result4 = "'";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"'\"");
            }
          }
          if (result4 !== null) {
            var result7 = parse_SingleStringCharacters();
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              if (input.substr(pos, 1) === "'") {
                var result6 = "'";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"'\"");
                }
              }
              if (result6 !== null) {
                var result3 = [result4, result5, result6];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;;
          };
        }
        var result2 = result1 !== null
          ? (function(parts) {
                return parts[1];
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("string");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoubleStringCharacters() {
        var cacheKey = 'DoubleStringCharacters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_DoubleStringCharacter();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_DoubleStringCharacter();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleStringCharacters() {
        var cacheKey = 'SingleStringCharacters@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_SingleStringCharacter();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_SingleStringCharacter();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(chars) { return chars.join(""); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoubleStringCharacter() {
        var cacheKey = 'DoubleStringCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var savedPos4 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "\"") {
          var result15 = "\"";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result15 !== null) {
          var result12 = result15;
        } else {
          if (input.substr(pos, 1) === "\\") {
            var result14 = "\\";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result13 = parse_LineTerminator();
            if (result13 !== null) {
              var result12 = result13;
            } else {
              var result12 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result12 === null) {
          var result10 = '';
        } else {
          var result10 = null;
          pos = savedPos4;
        }
        if (result10 !== null) {
          var result11 = parse_SourceCharacter();
          if (result11 !== null) {
            var result8 = [result10, result11];
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(char_) { return char_;     })(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "\\") {
            var result5 = "\\";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse_EscapeSequence();
            if (result6 !== null) {
              var result3 = [result5, result6];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(sequence) { return sequence;  })(result3[1])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_LineContinuation();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleStringCharacter() {
        var cacheKey = 'SingleStringCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var savedPos3 = pos;
        var savedPos4 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "'") {
          var result15 = "'";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"'\"");
          }
        }
        if (result15 !== null) {
          var result12 = result15;
        } else {
          if (input.substr(pos, 1) === "\\") {
            var result14 = "\\";
            pos += 1;
          } else {
            var result14 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result14 !== null) {
            var result12 = result14;
          } else {
            var result13 = parse_LineTerminator();
            if (result13 !== null) {
              var result12 = result13;
            } else {
              var result12 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result12 === null) {
          var result10 = '';
        } else {
          var result10 = null;
          pos = savedPos4;
        }
        if (result10 !== null) {
          var result11 = parse_SourceCharacter();
          if (result11 !== null) {
            var result8 = [result10, result11];
          } else {
            var result8 = null;
            pos = savedPos3;
          }
        } else {
          var result8 = null;
          pos = savedPos3;
        }
        var result9 = result8 !== null
          ? (function(char_) { return char_;     })(result8[1])
          : null;
        if (result9 !== null) {
          var result7 = result9;
        } else {
          var result7 = null;
          pos = savedPos2;
        }
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "\\") {
            var result5 = "\\";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"\\\\\"");
            }
          }
          if (result5 !== null) {
            var result6 = parse_EscapeSequence();
            if (result6 !== null) {
              var result3 = [result5, result6];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          var result4 = result3 !== null
            ? (function(sequence) { return sequence;  })(result3[1])
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_LineContinuation();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LineContinuation() {
        var cacheKey = 'LineContinuation@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "\\") {
          var result3 = "\\";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"\\\\\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_LineTerminatorSequence();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(sequence) { return sequence; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EscapeSequence() {
        var cacheKey = 'EscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_CharacterEscapeSequence();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "0") {
            var result6 = "0";
            pos += 1;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"0\"");
            }
          }
          if (result6 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result8 = parse_DecimalDigit();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result8 === null) {
              var result7 = '';
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            if (result7 !== null) {
              var result4 = [result6, result7];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result5 = result4 !== null
            ? (function() { return "\0"; })()
            : null;
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_HexEscapeSequence();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_UnicodeEscapeSequence();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CharacterEscapeSequence() {
        var cacheKey = 'CharacterEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_SingleEscapeCharacter();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_NonEscapeCharacter();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SingleEscapeCharacter() {
        var cacheKey = 'SingleEscapeCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos).match(/^['"\\bfnrtv]/) !== null) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("['\"\\\\bfnrtv]");
          }
        }
        var result2 = result1 !== null
          ? (function(char_) {
                return char_
                  .replace("b", "\b")
                  .replace("f", "\f")
                  .replace("n", "\n")
                  .replace("r", "\r")
                  .replace("t", "\t")
                  .replace("v", "\x0B") // IE does not recognize "\v".
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NonEscapeCharacter() {
        var cacheKey = 'NonEscapeCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_EscapeCharacter();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result7 === null) {
          var result6 = '';
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result3 = result6;
        } else {
          var result5 = parse_LineTerminator();
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;;
          };
        }
        if (result3 !== null) {
          var result4 = parse_SourceCharacter();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(char_) { return char_; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EscapeCharacter() {
        var cacheKey = 'EscapeCharacter@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result4 = parse_SingleEscapeCharacter();
        if (result4 !== null) {
          var result0 = result4;
        } else {
          var result3 = parse_DecimalDigit();
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "x") {
              var result2 = "x";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"x\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 1) === "u") {
                var result1 = "u";
                pos += 1;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\"u\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_HexEscapeSequence() {
        var cacheKey = 'HexEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "x") {
          var result3 = "x";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"x\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_HexDigit();
          if (result4 !== null) {
            var result5 = parse_HexDigit();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(h1, h2) {
                return String.fromCharCode(parseInt("0x" + h1 + h2));
              })(result1[1], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnicodeEscapeSequence() {
        var cacheKey = 'UnicodeEscapeSequence@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "u") {
          var result3 = "u";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"u\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse_HexDigit();
          if (result4 !== null) {
            var result5 = parse_HexDigit();
            if (result5 !== null) {
              var result6 = parse_HexDigit();
              if (result6 !== null) {
                var result7 = parse_HexDigit();
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(h1, h2, h3, h4) {
                return String.fromCharCode(parseInt("0x" + h1 + h2 + h3 + h4));
              })(result1[1], result1[2], result1[3], result1[4])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BreakToken() {
        var cacheKey = 'BreakToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "break") {
          var result1 = "break";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"break\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ContinueToken() {
        var cacheKey = 'ContinueToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "continue") {
          var result1 = "continue";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"continue\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DeleteToken() {
        var cacheKey = 'DeleteToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "delete") {
          var result3 = "delete";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"delete\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "delete"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoToken() {
        var cacheKey = 'DoToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "do") {
          var result1 = "do";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"do\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ElseToken() {
        var cacheKey = 'ElseToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "else") {
          var result1 = "else";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"else\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FalseToken() {
        var cacheKey = 'FalseToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "false") {
          var result1 = "false";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"false\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ForToken() {
        var cacheKey = 'ForToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 3) === "for") {
          var result1 = "for";
          pos += 3;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"for\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionToken() {
        var cacheKey = 'FunctionToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 8) === "function") {
          var result1 = "function";
          pos += 8;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"function\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IfToken() {
        var cacheKey = 'IfToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "if") {
          var result1 = "if";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_NullToken() {
        var cacheKey = 'NullToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "null") {
          var result1 = "null";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"null\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReturnToken() {
        var cacheKey = 'ReturnToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 6) === "return") {
          var result1 = "return";
          pos += 6;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"return\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TrueToken() {
        var cacheKey = 'TrueToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "true") {
          var result1 = "true";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_TypeofToken() {
        var cacheKey = 'TypeofToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 6) === "typeof") {
          var result3 = "typeof";
          pos += 6;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"typeof\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result5 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "typeof"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhileToken() {
        var cacheKey = 'WhileToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 5) === "while") {
          var result1 = "while";
          pos += 5;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"while\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ToToken() {
        var cacheKey = 'ToToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "to") {
          var result1 = "to";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"to\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StepToken() {
        var cacheKey = 'StepToken@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 4) === "step") {
          var result1 = "step";
          pos += 4;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"step\"");
          }
        }
        if (result1 !== null) {
          var savedPos1 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result3 = parse_IdentifierPart();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result3 === null) {
            var result2 = '';
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOS() {
        var cacheKey = 'EOS@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var result12 = parse___();
        if (result12 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result13 = ";";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result13 !== null) {
            var result11 = [result12, result13];
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos3 = pos;
          var result9 = parse__();
          if (result9 !== null) {
            var result10 = parse_LineTerminatorSequence();
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            var result5 = parse__();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === "}") {
                var result7 = "}";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 !== null) {
                var result6 = '';
                pos = savedPos2;
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse___();
              if (result2 !== null) {
                var result3 = parse_EOF();
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOSNoLineTerminator() {
        var cacheKey = 'EOSNoLineTerminator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos4 = pos;
        var result12 = parse__();
        if (result12 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result13 = ";";
            pos += 1;
          } else {
            var result13 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result13 !== null) {
            var result11 = [result12, result13];
          } else {
            var result11 = null;
            pos = savedPos4;
          }
        } else {
          var result11 = null;
          pos = savedPos4;
        }
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos3 = pos;
          var result9 = parse__();
          if (result9 !== null) {
            var result10 = parse_LineTerminatorSequence();
            if (result10 !== null) {
              var result8 = [result9, result10];
            } else {
              var result8 = null;
              pos = savedPos3;
            }
          } else {
            var result8 = null;
            pos = savedPos3;
          }
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var savedPos1 = pos;
            var result5 = parse__();
            if (result5 !== null) {
              var savedPos2 = pos;
              var savedReportMatchFailuresVar0 = reportMatchFailures;
              reportMatchFailures = false;
              if (input.substr(pos, 1) === "}") {
                var result7 = "}";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              reportMatchFailures = savedReportMatchFailuresVar0;
              if (result7 !== null) {
                var result6 = '';
                pos = savedPos2;
              } else {
                var result6 = null;
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
            if (result4 !== null) {
              var result0 = result4;
            } else {
              var savedPos0 = pos;
              var result2 = parse__();
              if (result2 !== null) {
                var result3 = parse_EOF();
                if (result3 !== null) {
                  var result1 = [result2, result3];
                } else {
                  var result1 = null;
                  pos = savedPos0;
                }
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EOF() {
        var cacheKey = 'EOF@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result1 = input.charAt(pos);
          pos++;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result1 === null) {
          var result0 = '';
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result4 = parse_WhiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_MultiLineCommentNoLineTerminator();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_SingleLineComment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_WhiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_MultiLineCommentNoLineTerminator();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_SingleLineComment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___() {
        var cacheKey = '__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result0 = [];
        var result4 = parse_WhiteSpace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_LineTerminatorSequence();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_Comment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_WhiteSpace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_LineTerminatorSequence();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_Comment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PrimaryExpression() {
        var cacheKey = 'PrimaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos2 = pos;
        var result11 = parse_Identifier();
        var result12 = result11 !== null
          ? (function(name) { return { type: "Variable", name: name }; })(result11)
          : null;
        if (result12 !== null) {
          var result10 = result12;
        } else {
          var result10 = null;
          pos = savedPos2;
        }
        if (result10 !== null) {
          var result0 = result10;
        } else {
          var result9 = parse_Literal();
          if (result9 !== null) {
            var result0 = result9;
          } else {
            var savedPos0 = pos;
            var savedPos1 = pos;
            if (input.substr(pos, 1) === "(") {
              var result4 = "(";
              pos += 1;
            } else {
              var result4 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result4 !== null) {
              var result5 = parse___();
              if (result5 !== null) {
                var result6 = parse_Expression();
                if (result6 !== null) {
                  var result7 = parse___();
                  if (result7 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result8 = ")";
                      pos += 1;
                    } else {
                      var result8 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result8 !== null) {
                      var result2 = [result4, result5, result6, result7, result8];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
            var result3 = result2 !== null
              ? (function(expression) { return expression; })(result2[2])
              : null;
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result1 = null;
              pos = savedPos0;
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_CallExpression() {
        var cacheKey = 'CallExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_PrimaryExpression();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var result5 = parse_Arguments();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, arguments) {
                return {
                  type:      "FunctionCall",
                  name:      name,
                  arguments: arguments
                };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Arguments() {
        var cacheKey = 'Arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var result8 = parse_ArgumentList();
            var result5 = result8 !== null ? result8 : '';
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                if (input.substr(pos, 1) === ")") {
                  var result7 = ")";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\")\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(arguments) {
              return arguments !== "" ? arguments : [];
            })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ArgumentList() {
        var cacheKey = 'ArgumentList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AssignmentExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_AssignmentExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_AssignmentExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
              var result = [head];
              for (var i = 0; i < tail.length; i++) {
                result.push(tail[i][3]);
              }
              return result;
            })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LeftHandSideExpression() {
        var cacheKey = 'LeftHandSideExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_CallExpression();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_PrimaryExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PostfixExpression() {
        var cacheKey = 'PostfixExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_LeftHandSideExpression();
        if (result5 !== null) {
          var result6 = parse__();
          if (result6 !== null) {
            var result7 = parse_PostfixOperator();
            if (result7 !== null) {
              var result3 = [result5, result6, result7];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(expression, operator) {
                return {
                  type:       "PostfixExpression",
                  operator:   operator,
                  expression: expression
                };
              })(result3[0], result3[2])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LeftHandSideExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_PostfixOperator() {
        var cacheKey = 'PostfixOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "++") {
          var result2 = "++";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"++\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 2) === "--") {
            var result1 = "--";
            pos += 2;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"--\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryExpression() {
        var cacheKey = 'UnaryExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_PostfixExpression();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse_UnaryOperator();
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_UnaryExpression();
              if (result6 !== null) {
                var result2 = [result4, result5, result6];
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(operator, expression) {
                  return {
                    type:       "UnaryExpression",
                    operator:   operator,
                    expression: expression
                  };
                })(result2[0], result2[2])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_UnaryOperator() {
        var cacheKey = 'UnaryOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result7 = parse_DeleteToken();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          if (input.substr(pos, 2) === "++") {
            var result6 = "++";
            pos += 2;
          } else {
            var result6 = null;
            if (reportMatchFailures) {
              matchFailed("\"++\"");
            }
          }
          if (result6 !== null) {
            var result0 = result6;
          } else {
            if (input.substr(pos, 2) === "--") {
              var result5 = "--";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"--\"");
              }
            }
            if (result5 !== null) {
              var result0 = result5;
            } else {
              if (input.substr(pos, 1) === "+") {
                var result4 = "+";
                pos += 1;
              } else {
                var result4 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result4 !== null) {
                var result0 = result4;
              } else {
                if (input.substr(pos, 1) === "-") {
                  var result3 = "-";
                  pos += 1;
                } else {
                  var result3 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  if (input.substr(pos, 1) === "~") {
                    var result2 = "~";
                    pos += 1;
                  } else {
                    var result2 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"~\"");
                    }
                  }
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    if (input.substr(pos, 1) === "!") {
                      var result1 = "!";
                      pos += 1;
                    } else {
                      var result1 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"!\"");
                      }
                    }
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeExpression() {
        var cacheKey = 'MultiplicativeExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_UnaryExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_MultiplicativeOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_UnaryExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_MultiplicativeOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_UnaryExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_MultiplicativeOperator() {
        var cacheKey = 'MultiplicativeOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "*") {
          var result8 = "*";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"*\"");
          }
        }
        if (result8 !== null) {
          var result3 = result8;
        } else {
          if (input.substr(pos, 1) === "/") {
            var result7 = "/";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"/\"");
            }
          }
          if (result7 !== null) {
            var result3 = result7;
          } else {
            if (input.substr(pos, 1) === "%") {
              var result6 = "%";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"%\"");
              }
            }
            if (result6 !== null) {
              var result3 = result6;
            } else {
              var result3 = null;;
            };
          };
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result5 = "=";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(operator) { return operator; })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveExpression() {
        var cacheKey = 'AdditiveExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_MultiplicativeExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_AdditiveOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_MultiplicativeExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_AdditiveOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_MultiplicativeExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AdditiveOperator() {
        var cacheKey = 'AdditiveOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos3 = pos;
        var savedPos4 = pos;
        if (input.substr(pos, 1) === "+") {
          var result12 = "+";
          pos += 1;
        } else {
          var result12 = null;
          if (reportMatchFailures) {
            matchFailed("\"+\"");
          }
        }
        if (result12 !== null) {
          var savedPos5 = pos;
          var savedReportMatchFailuresVar1 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "+") {
            var result16 = "+";
            pos += 1;
          } else {
            var result16 = null;
            if (reportMatchFailures) {
              matchFailed("\"+\"");
            }
          }
          if (result16 !== null) {
            var result14 = result16;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result15 = "=";
              pos += 1;
            } else {
              var result15 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result15 !== null) {
              var result14 = result15;
            } else {
              var result14 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar1;
          if (result14 === null) {
            var result13 = '';
          } else {
            var result13 = null;
            pos = savedPos5;
          }
          if (result13 !== null) {
            var result10 = [result12, result13];
          } else {
            var result10 = null;
            pos = savedPos4;
          }
        } else {
          var result10 = null;
          pos = savedPos4;
        }
        var result11 = result10 !== null
          ? (function() { return "+"; })()
          : null;
        if (result11 !== null) {
          var result9 = result11;
        } else {
          var result9 = null;
          pos = savedPos3;
        }
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          if (input.substr(pos, 1) === "-") {
            var result4 = "-";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"-\"");
            }
          }
          if (result4 !== null) {
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 1) === "-") {
              var result8 = "-";
              pos += 1;
            } else {
              var result8 = null;
              if (reportMatchFailures) {
                matchFailed("\"-\"");
              }
            }
            if (result8 !== null) {
              var result6 = result8;
            } else {
              if (input.substr(pos, 1) === "=") {
                var result7 = "=";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result7 !== null) {
                var result6 = result7;
              } else {
                var result6 = null;;
              };
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function() { return "-"; })()
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ShiftExpression() {
        var cacheKey = 'ShiftExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AdditiveExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_ShiftOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_AdditiveExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_ShiftOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_AdditiveExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ShiftOperator() {
        var cacheKey = 'ShiftOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "<<") {
          var result3 = "<<";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"<<\"");
          }
        }
        if (result3 !== null) {
          var result0 = result3;
        } else {
          if (input.substr(pos, 3) === ">>>") {
            var result2 = ">>>";
            pos += 3;
          } else {
            var result2 = null;
            if (reportMatchFailures) {
              matchFailed("\">>>\"");
            }
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            if (input.substr(pos, 2) === ">>") {
              var result1 = ">>";
              pos += 2;
            } else {
              var result1 = null;
              if (reportMatchFailures) {
                matchFailed("\">>\"");
              }
            }
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalExpression() {
        var cacheKey = 'RelationalExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ShiftExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_RelationalOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_ShiftExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_RelationalOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_ShiftExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_RelationalOperator() {
        var cacheKey = 'RelationalOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "<=") {
          var result4 = "<=";
          pos += 2;
        } else {
          var result4 = null;
          if (reportMatchFailures) {
            matchFailed("\"<=\"");
          }
        }
        if (result4 !== null) {
          var result0 = result4;
        } else {
          if (input.substr(pos, 2) === ">=") {
            var result3 = ">=";
            pos += 2;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\">=\"");
            }
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            if (input.substr(pos, 1) === "<") {
              var result2 = "<";
              pos += 1;
            } else {
              var result2 = null;
              if (reportMatchFailures) {
                matchFailed("\"<\"");
              }
            }
            if (result2 !== null) {
              var result0 = result2;
            } else {
              if (input.substr(pos, 1) === ">") {
                var result1 = ">";
                pos += 1;
              } else {
                var result1 = null;
                if (reportMatchFailures) {
                  matchFailed("\">\"");
                }
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EqualityExpression() {
        var cacheKey = 'EqualityExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_RelationalExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_EqualityOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_RelationalExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_EqualityOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_RelationalExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EqualityOperator() {
        var cacheKey = 'EqualityOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        if (input.substr(pos, 2) === "==") {
          var result2 = "==";
          pos += 2;
        } else {
          var result2 = null;
          if (reportMatchFailures) {
            matchFailed("\"==\"");
          }
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          if (input.substr(pos, 2) === "!=") {
            var result1 = "!=";
            pos += 2;
          } else {
            var result1 = null;
            if (reportMatchFailures) {
              matchFailed("\"!=\"");
            }
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseANDExpression() {
        var cacheKey = 'BitwiseANDExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_EqualityExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_BitwiseANDOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_EqualityExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_BitwiseANDOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_EqualityExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseANDOperator() {
        var cacheKey = 'BitwiseANDOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "&") {
          var result3 = "&";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"&\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "&") {
            var result7 = "&";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"&\"");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result6 = "=";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "&"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseXORExpression() {
        var cacheKey = 'BitwiseXORExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_BitwiseANDExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_BitwiseXOROperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_BitwiseANDExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_BitwiseXOROperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_BitwiseANDExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseXOROperator() {
        var cacheKey = 'BitwiseXOROperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "^") {
          var result3 = "^";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"^\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "^") {
            var result7 = "^";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"^\"");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result6 = "=";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "^"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseORExpression() {
        var cacheKey = 'BitwiseORExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_BitwiseXORExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_BitwiseOROperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_BitwiseXORExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_BitwiseOROperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_BitwiseXORExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BitwiseOROperator() {
        var cacheKey = 'BitwiseOROperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "|") {
          var result3 = "|";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"|\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "|") {
            var result7 = "|";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"|\"");
            }
          }
          if (result7 !== null) {
            var result5 = result7;
          } else {
            if (input.substr(pos, 1) === "=") {
              var result6 = "=";
              pos += 1;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"=\"");
              }
            }
            if (result6 !== null) {
              var result5 = result6;
            } else {
              var result5 = null;;
            };
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "|"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LogicalANDExpression() {
        var cacheKey = 'LogicalANDExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_BitwiseORExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_LogicalANDOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_BitwiseORExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_LogicalANDOperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_BitwiseORExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LogicalANDOperator() {
        var cacheKey = 'LogicalANDOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "&&") {
          var result3 = "&&";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"&&\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result5 = "=";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "&&"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LogicalORExpression() {
        var cacheKey = 'LogicalORExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_LogicalANDExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_LogicalOROperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_LogicalANDExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_LogicalOROperator();
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_LogicalANDExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_LogicalOROperator() {
        var cacheKey = 'LogicalOROperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 2) === "||") {
          var result3 = "||";
          pos += 2;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"||\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result5 = "=";
            pos += 1;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result5 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return "||"; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ConditionalExpression() {
        var cacheKey = 'ConditionalExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_LogicalORExpression();
        if (result5 !== null) {
          var result6 = parse___();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "?") {
              var result7 = "?";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"?\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_AssignmentExpression();
                if (result9 !== null) {
                  var result10 = parse___();
                  if (result10 !== null) {
                    if (input.substr(pos, 1) === ":") {
                      var result11 = ":";
                      pos += 1;
                    } else {
                      var result11 = null;
                      if (reportMatchFailures) {
                        matchFailed("\":\"");
                      }
                    }
                    if (result11 !== null) {
                      var result12 = parse___();
                      if (result12 !== null) {
                        var result13 = parse_AssignmentExpression();
                        if (result13 !== null) {
                          var result3 = [result5, result6, result7, result8, result9, result10, result11, result12, result13];
                        } else {
                          var result3 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result3 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result3 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result3 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(condition, trueExpression, falseExpression) {
                return {
                  type:            "ConditionalExpression",
                  condition:       condition,
                  trueExpression:  trueExpression,
                  falseExpression: falseExpression
                };
              })(result3[0], result3[4], result3[8])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_LogicalORExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AssignmentExpression() {
        var cacheKey = 'AssignmentExpression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result5 = parse_LeftHandSideExpression();
        if (result5 !== null) {
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_AssignmentOperator();
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_AssignmentExpression();
                if (result9 !== null) {
                  var result3 = [result5, result6, result7, result8, result9];
                } else {
                  var result3 = null;
                  pos = savedPos1;
                }
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
        } else {
          var result3 = null;
          pos = savedPos1;
        }
        var result4 = result3 !== null
          ? (function(left, operator, right) {
                return {
                  type:     "AssignmentExpression",
                  operator: operator,
                  left:     left,
                  right:    right
                };
              })(result3[0], result3[2], result3[4])
          : null;
        if (result4 !== null) {
          var result2 = result4;
        } else {
          var result2 = null;
          pos = savedPos0;
        }
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_ConditionalExpression();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_AssignmentOperator() {
        var cacheKey = 'AssignmentOperator@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "=") {
          var result15 = "=";
          pos += 1;
        } else {
          var result15 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result15 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result17 = "=";
            pos += 1;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result17 === null) {
            var result16 = '';
          } else {
            var result16 = null;
            pos = savedPos2;
          }
          if (result16 !== null) {
            var result13 = [result15, result16];
          } else {
            var result13 = null;
            pos = savedPos1;
          }
        } else {
          var result13 = null;
          pos = savedPos1;
        }
        var result14 = result13 !== null
          ? (function() { return "="; })()
          : null;
        if (result14 !== null) {
          var result12 = result14;
        } else {
          var result12 = null;
          pos = savedPos0;
        }
        if (result12 !== null) {
          var result0 = result12;
        } else {
          if (input.substr(pos, 2) === "*=") {
            var result11 = "*=";
            pos += 2;
          } else {
            var result11 = null;
            if (reportMatchFailures) {
              matchFailed("\"*=\"");
            }
          }
          if (result11 !== null) {
            var result0 = result11;
          } else {
            if (input.substr(pos, 2) === "/=") {
              var result10 = "/=";
              pos += 2;
            } else {
              var result10 = null;
              if (reportMatchFailures) {
                matchFailed("\"/=\"");
              }
            }
            if (result10 !== null) {
              var result0 = result10;
            } else {
              if (input.substr(pos, 2) === "%=") {
                var result9 = "%=";
                pos += 2;
              } else {
                var result9 = null;
                if (reportMatchFailures) {
                  matchFailed("\"%=\"");
                }
              }
              if (result9 !== null) {
                var result0 = result9;
              } else {
                if (input.substr(pos, 2) === "+=") {
                  var result8 = "+=";
                  pos += 2;
                } else {
                  var result8 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+=\"");
                  }
                }
                if (result8 !== null) {
                  var result0 = result8;
                } else {
                  if (input.substr(pos, 2) === "-=") {
                    var result7 = "-=";
                    pos += 2;
                  } else {
                    var result7 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"-=\"");
                    }
                  }
                  if (result7 !== null) {
                    var result0 = result7;
                  } else {
                    if (input.substr(pos, 3) === "<<=") {
                      var result6 = "<<=";
                      pos += 3;
                    } else {
                      var result6 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"<<=\"");
                      }
                    }
                    if (result6 !== null) {
                      var result0 = result6;
                    } else {
                      if (input.substr(pos, 3) === ">>=") {
                        var result5 = ">>=";
                        pos += 3;
                      } else {
                        var result5 = null;
                        if (reportMatchFailures) {
                          matchFailed("\">>=\"");
                        }
                      }
                      if (result5 !== null) {
                        var result0 = result5;
                      } else {
                        if (input.substr(pos, 4) === ">>>=") {
                          var result4 = ">>>=";
                          pos += 4;
                        } else {
                          var result4 = null;
                          if (reportMatchFailures) {
                            matchFailed("\">>>=\"");
                          }
                        }
                        if (result4 !== null) {
                          var result0 = result4;
                        } else {
                          if (input.substr(pos, 2) === "&=") {
                            var result3 = "&=";
                            pos += 2;
                          } else {
                            var result3 = null;
                            if (reportMatchFailures) {
                              matchFailed("\"&=\"");
                            }
                          }
                          if (result3 !== null) {
                            var result0 = result3;
                          } else {
                            if (input.substr(pos, 2) === "^=") {
                              var result2 = "^=";
                              pos += 2;
                            } else {
                              var result2 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"^=\"");
                              }
                            }
                            if (result2 !== null) {
                              var result0 = result2;
                            } else {
                              if (input.substr(pos, 2) === "|=") {
                                var result1 = "|=";
                                pos += 2;
                              } else {
                                var result1 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"|=\"");
                                }
                              }
                              if (result1 !== null) {
                                var result0 = result1;
                              } else {
                                var result0 = null;;
                              };
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Expression() {
        var cacheKey = 'Expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_AssignmentExpression();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_AssignmentExpression();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_AssignmentExpression();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = head;
                for (var i = 0; i < tail.length; i++) {
                  result = {
                    type:     "BinaryExpression",
                    operator: tail[i][1],
                    left:     result,
                    right:    tail[i][3]
                  };
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Statement() {
        var cacheKey = 'Statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result9 = parse_Block();
        if (result9 !== null) {
          var result0 = result9;
        } else {
          var result8 = parse_VariableStatement();
          if (result8 !== null) {
            var result0 = result8;
          } else {
            var result7 = parse_EmptyStatement();
            if (result7 !== null) {
              var result0 = result7;
            } else {
              var result6 = parse_ExpressionStatement();
              if (result6 !== null) {
                var result0 = result6;
              } else {
                var result5 = parse_IfStatement();
                if (result5 !== null) {
                  var result0 = result5;
                } else {
                  var result4 = parse_IterationStatement();
                  if (result4 !== null) {
                    var result0 = result4;
                  } else {
                    var result3 = parse_ContinueStatement();
                    if (result3 !== null) {
                      var result0 = result3;
                    } else {
                      var result2 = parse_BreakStatement();
                      if (result2 !== null) {
                        var result0 = result2;
                      } else {
                        var result1 = parse_ReturnStatement();
                        if (result1 !== null) {
                          var result0 = result1;
                        } else {
                          var result0 = null;;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Block() {
        var cacheKey = 'Block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var savedPos2 = pos;
            var result8 = parse_StatementList();
            if (result8 !== null) {
              var result9 = parse___();
              if (result9 !== null) {
                var result7 = [result8, result9];
              } else {
                var result7 = null;
                pos = savedPos2;
              }
            } else {
              var result7 = null;
              pos = savedPos2;
            }
            var result5 = result7 !== null ? result7 : '';
            if (result5 !== null) {
              if (input.substr(pos, 1) === "}") {
                var result6 = "}";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"}\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(statements) {
                return {
                  type:       "Block",
                  statements: statements !== "" ? statements[0] : []
                };
              })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_StatementList() {
        var cacheKey = 'StatementList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Statement();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_Statement();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_Statement();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1]);
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VariableStatement() {
        var cacheKey = 'VariableStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_VariableDeclarationList();
        if (result3 !== null) {
          var result4 = parse_EOS();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(declarations) {
                return {
                  type:         "VariableStatement",
                  declarations: declarations
                };
              })(result1[0])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VariableDeclarationList() {
        var cacheKey = 'VariableDeclarationList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_VariableDeclaration();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_VariableDeclaration();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_VariableDeclaration();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_VariableDeclaration() {
        var cacheKey = 'VariableDeclaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Identifier();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var result6 = parse_Initialiser();
            var result5 = result6 !== null ? result6 : '';
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, value) {
                return {
                  type:  "VariableDeclaration",
                  name:  name,
                  value: value !== "" ? value : null
                };
              })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Initialiser() {
        var cacheKey = 'Initialiser@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "=") {
          var result3 = "=";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"=\"");
          }
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 1) === "=") {
            var result7 = "=";
            pos += 1;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"=\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result5 = parse___();
            if (result5 !== null) {
              var result6 = parse_AssignmentExpression();
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expression) { return expression; })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_EmptyStatement() {
        var cacheKey = 'EmptyStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        if (input.substr(pos, 1) === ";") {
          var result1 = ";";
          pos += 1;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\";\"");
          }
        }
        var result2 = result1 !== null
          ? (function() { return { type: "EmptyStatement" }; })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ExpressionStatement() {
        var cacheKey = 'ExpressionStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos2 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 1) === "{") {
          var result8 = "{";
          pos += 1;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result7 = parse_FunctionToken();
          if (result7 !== null) {
            var result6 = result7;
          } else {
            var result6 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result6 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos2;
        }
        if (result3 !== null) {
          var result4 = parse_Expression();
          if (result4 !== null) {
            var result5 = parse_EOS();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(expression) { return expression; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IfStatement() {
        var cacheKey = 'IfStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_IfToken();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result7 = parse_Expression();
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result11 = parse_Statement();
                        if (result11 !== null) {
                          var savedPos2 = pos;
                          var result14 = parse___();
                          if (result14 !== null) {
                            var result15 = parse_ElseToken();
                            if (result15 !== null) {
                              var result16 = parse___();
                              if (result16 !== null) {
                                var result17 = parse_Statement();
                                if (result17 !== null) {
                                  var result13 = [result14, result15, result16, result17];
                                } else {
                                  var result13 = null;
                                  pos = savedPos2;
                                }
                              } else {
                                var result13 = null;
                                pos = savedPos2;
                              }
                            } else {
                              var result13 = null;
                              pos = savedPos2;
                            }
                          } else {
                            var result13 = null;
                            pos = savedPos2;
                          }
                          var result12 = result13 !== null ? result13 : '';
                          if (result12 !== null) {
                            var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(condition, ifStatement, elseStatement) {
                return {
                  type:          "IfStatement",
                  condition:     condition,
                  ifStatement:   ifStatement,
                  elseStatement: elseStatement !== "" ? elseStatement[3] : null
                };
              })(result1[4], result1[8], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_IterationStatement() {
        var cacheKey = 'IterationStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result3 = parse_DoWhileStatement();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_WhileStatement();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_ForStatement();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_DoWhileStatement() {
        var cacheKey = 'DoWhileStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_DoToken();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var result5 = parse_Statement();
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result7 = parse_WhileToken();
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result9 = "(";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result11 = parse_Expression();
                        if (result11 !== null) {
                          var result12 = parse___();
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result13 = ")";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = parse_EOS();
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(statement, condition) {
                return {
                  type: "DoWhileStatement",
                  condition: condition,
                  statement: statement
                };
              })(result1[2], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_WhileStatement() {
        var cacheKey = 'WhileStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_WhileToken();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var result7 = parse_Expression();
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ")") {
                      var result9 = ")";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\")\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result11 = parse_Statement();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(condition, statement) {
                return {
                  type: "WhileStatement",
                  condition: condition,
                  statement: statement
                };
              })(result1[4], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ForStatement() {
        var cacheKey = 'ForStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ForToken();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result5 = "(";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                var savedPos2 = pos;
                var result25 = parse_VariableDeclarationList();
                var result26 = result25 !== null
                  ? (function(declarations) {
                            return {
                              type:         "VariableStatement",
                              declarations: declarations
                            };
                          })(result25)
                  : null;
                if (result26 !== null) {
                  var result24 = result26;
                } else {
                  var result24 = null;
                  pos = savedPos2;
                }
                if (result24 !== null) {
                  var result7 = result24;
                } else {
                  var result23 = parse_Expression();
                  var result22 = result23 !== null ? result23 : '';
                  if (result22 !== null) {
                    var result7 = result22;
                  } else {
                    var result7 = null;;
                  };
                }
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === ";") {
                      var result9 = ";";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\";\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        var result21 = parse_Expression();
                        var result11 = result21 !== null ? result21 : '';
                        if (result11 !== null) {
                          var result12 = parse___();
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === ";") {
                              var result13 = ";";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\";\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = parse___();
                              if (result14 !== null) {
                                var result20 = parse_Expression();
                                var result15 = result20 !== null ? result20 : '';
                                if (result15 !== null) {
                                  var result16 = parse___();
                                  if (result16 !== null) {
                                    if (input.substr(pos, 1) === ")") {
                                      var result17 = ")";
                                      pos += 1;
                                    } else {
                                      var result17 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\")\"");
                                      }
                                    }
                                    if (result17 !== null) {
                                      var result18 = parse___();
                                      if (result18 !== null) {
                                        var result19 = parse_Statement();
                                        if (result19 !== null) {
                                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19];
                                        } else {
                                          var result1 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result1 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(initializer, test, counter, statement) {
                return {
                  type:        "ForStatement",
                  initializer: initializer !== "" ? initializer : null,
                  test:        test !== "" ? test : null,
                  counter:     counter !== "" ? counter : null,
                  statement:   statement
                };
              })(result1[4], result1[8], result1[12], result1[16])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ContinueStatement() {
        var cacheKey = 'ContinueStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ContinueToken();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_EOSNoLineTerminator();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
                return {
                  type:  "ContinueStatement"
                };
              })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_BreakStatement() {
        var cacheKey = 'BreakStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_BreakToken();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_EOSNoLineTerminator();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() {
                return {
                  type:  "BreakStatement",
                };
              })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_ReturnStatement() {
        var cacheKey = 'ReturnStatement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_ReturnToken();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var savedPos3 = pos;
            var savedPos4 = pos;
            var result12 = parse_Expression();
            if (result12 !== null) {
              var result13 = parse_EOS();
              if (result13 !== null) {
                var result10 = [result12, result13];
              } else {
                var result10 = null;
                pos = savedPos4;
              }
            } else {
              var result10 = null;
              pos = savedPos4;
            }
            var result11 = result10 !== null
              ? (function(expression) { return expression; })(result10[0])
              : null;
            if (result11 !== null) {
              var result9 = result11;
            } else {
              var result9 = null;
              pos = savedPos3;
            }
            if (result9 !== null) {
              var result5 = result9;
            } else {
              var savedPos2 = pos;
              var result7 = parse_EOSNoLineTerminator();
              var result8 = result7 !== null
                ? (function() { return ""; })()
                : null;
              if (result8 !== null) {
                var result6 = result8;
              } else {
                var result6 = null;
                pos = savedPos2;
              }
              if (result6 !== null) {
                var result5 = result6;
              } else {
                var result5 = null;;
              };
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(value) {
                return {
                  type:  "ReturnStatement",
                  value: value !== "" ? value : null
                };
              })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionDeclaration() {
        var cacheKey = 'FunctionDeclaration@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_FunctionToken();
        if (result3 !== null) {
          var result4 = parse___();
          if (result4 !== null) {
            var result5 = parse_Identifier();
            if (result5 !== null) {
              var result6 = parse___();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result7 = "(";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse___();
                  if (result8 !== null) {
                    var result18 = parse_FormalParameterList();
                    var result9 = result18 !== null ? result18 : '';
                    if (result9 !== null) {
                      var result10 = parse___();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse___();
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === "{") {
                              var result13 = "{";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\"{\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = parse___();
                              if (result14 !== null) {
                                var result15 = parse_FunctionBody();
                                if (result15 !== null) {
                                  var result16 = parse___();
                                  if (result16 !== null) {
                                    if (input.substr(pos, 1) === "}") {
                                      var result17 = "}";
                                      pos += 1;
                                    } else {
                                      var result17 = null;
                                      if (reportMatchFailures) {
                                        matchFailed("\"}\"");
                                      }
                                    }
                                    if (result17 !== null) {
                                      var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17];
                                    } else {
                                      var result1 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(name, params, elements) {
                return {
                  type:     "Function",
                  name:     name,
                  params:   params !== "" ? params : [],
                  elements: elements
                };
              })(result1[2], result1[6], result1[12])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FormalParameterList() {
        var cacheKey = 'FormalParameterList@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_Identifier();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            if (input.substr(pos, 1) === ",") {
              var result7 = ",";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\",\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse___();
              if (result8 !== null) {
                var result9 = parse_Identifier();
                if (result9 !== null) {
                  var result5 = [result6, result7, result8, result9];
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result7 = ",";
                pos += 1;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result7 !== null) {
                var result8 = parse___();
                if (result8 !== null) {
                  var result9 = parse_Identifier();
                  if (result9 !== null) {
                    var result5 = [result6, result7, result8, result9];
                  } else {
                    var result5 = null;
                    pos = savedPos2;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos2;
                }
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][3]);
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_FunctionBody() {
        var cacheKey = 'FunctionBody@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_SourceElements();
        var result1 = result3 !== null ? result3 : '';
        var result2 = result1 !== null
          ? (function(elements) { return elements !== "" ? elements : []; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_Program() {
        var cacheKey = 'Program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var result3 = parse_SourceElements();
        var result1 = result3 !== null ? result3 : '';
        var result2 = result1 !== null
          ? (function(elements) {
                return {
                  type:     "Program",
                  elements: elements !== "" ? elements : []
                };
              })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SourceElements() {
        var cacheKey = 'SourceElements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_SourceElement();
        if (result3 !== null) {
          var result4 = [];
          var savedPos2 = pos;
          var result6 = parse___();
          if (result6 !== null) {
            var result7 = parse_SourceElement();
            if (result7 !== null) {
              var result5 = [result6, result7];
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          while (result5 !== null) {
            result4.push(result5);
            var savedPos2 = pos;
            var result6 = parse___();
            if (result6 !== null) {
              var result7 = parse_SourceElement();
              if (result7 !== null) {
                var result5 = [result6, result7];
              } else {
                var result5 = null;
                pos = savedPos2;
              }
            } else {
              var result5 = null;
              pos = savedPos2;
            }
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(head, tail) {
                var result = [head];
                for (var i = 0; i < tail.length; i++) {
                  result.push(tail[i][1]);
                }
                return result;
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_SourceElement() {
        var cacheKey = 'SourceElement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var result2 = parse_Statement();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_FunctionDeclaration();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
