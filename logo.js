module.exports = (function(){
  /* Generated by PEG.js 0.6.2 (http://pegjs.majda.cz/). */
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "$": parse_$,
        "_": parse__,
        "__unknown__": parse___unknown__,
        "additive": parse_additive,
        "arguments": parse_arguments,
        "assignment": parse_assignment,
        "block_comment": parse_block_comment,
        "break_stmt": parse_break_stmt,
        "call_expression": parse_call_expression,
        "comma_separated_args": parse_comma_separated_args,
        "comma_seperated_identifiers": parse_comma_seperated_identifiers,
        "comment": parse_comment,
        "continue_stmt": parse_continue_stmt,
        "decimal": parse_decimal,
        "do_while_stmt": parse_do_while_stmt,
        "empty_stmt": parse_empty_stmt,
        "equality": parse_equality,
        "expression": parse_expression,
        "expression_stmt": parse_expression_stmt,
        "for_stmt": parse_for_stmt,
        "function_body": parse_function_body,
        "function_decl": parse_function_decl,
        "identifier": parse_identifier,
        "if_stmt": parse_if_stmt,
        "iteration_stmt": parse_iteration_stmt,
        "keyword": parse_keyword,
        "linebreak": parse_linebreak,
        "literal": parse_literal,
        "logical_and": parse_logical_and,
        "logical_or": parse_logical_or,
        "lvalue_expression": parse_lvalue_expression,
        "multiplicative": parse_multiplicative,
        "numeric": parse_numeric,
        "param_list": parse_param_list,
        "primary": parse_primary,
        "program": parse_program,
        "relational": parse_relational,
        "return_stmt": parse_return_stmt,
        "single_comment": parse_single_comment,
        "source_element": parse_source_element,
        "source_elements": parse_source_elements,
        "statement": parse_statement,
        "stmt_block": parse_stmt_block,
        "stmt_or_block": parse_stmt_or_block,
        "unary": parse_unary,
        "while_stmt": parse_while_stmt,
        "whitespace": parse_whitespace
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "program";
      }
      
      var pos = 0;
      var reportMatchFailures = true;
      var rightmostMatchFailuresPos = 0;
      var rightmostMatchFailuresExpected = [];
      var cache = {};
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        
        if (charCode <= 0xFF) {
          var escapeChar = 'x';
          var length = 2;
        } else {
          var escapeChar = 'u';
          var length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function quote(s) {
        /*
         * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
         * string literal except for the closing quote character, backslash,
         * carriage return, line separator, paragraph separator, and line feed.
         * Any character may appear in the form of an escape sequence.
         */
        return '"' + s
          .replace(/\\/g, '\\\\')            // backslash
          .replace(/"/g, '\\"')              // closing quote character
          .replace(/\r/g, '\\r')             // carriage return
          .replace(/\n/g, '\\n')             // line feed
          .replace(/[\x80-\uFFFF]/g, escape) // non-ASCII characters
          + '"';
      }
      
      function matchFailed(failure) {
        if (pos < rightmostMatchFailuresPos) {
          return;
        }
        
        if (pos > rightmostMatchFailuresPos) {
          rightmostMatchFailuresPos = pos;
          rightmostMatchFailuresExpected = [];
        }
        
        rightmostMatchFailuresExpected.push(failure);
      }
      
      function parse_program() {
        var cacheKey = 'program@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result6 = parse_source_elements();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(x) { return x === "" ? new SourceElements([]) : x; })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_source_elements() {
        var cacheKey = 'source_elements@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result3 = parse_source_element();
        if (result3 !== null) {
          var result1 = [];
          while (result3 !== null) {
            result1.push(result3);
            var result3 = parse_source_element();
          }
        } else {
          var result1 = null;
        }
        var result2 = result1 !== null
          ? (function(x) { return new SourceElements(x); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("source elements");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_source_element() {
        var cacheKey = 'source_element@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_function_decl();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_statement();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("source element");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_decl() {
        var cacheKey = 'function_decl@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 8) === "function") {
            var result4 = "function";
            pos += 8;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"function\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_$();
            if (result5 !== null) {
              var result6 = parse_identifier();
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = parse_param_list();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === "{") {
                        var result10 = "{";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"{\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse__();
                        if (result11 !== null) {
                          var result12 = parse_function_body();
                          if (result12 !== null) {
                            var result13 = parse__();
                            if (result13 !== null) {
                              if (input.substr(pos, 1) === "}") {
                                var result14 = "}";
                                pos += 1;
                              } else {
                                var result14 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"}\"");
                                }
                              }
                              if (result14 !== null) {
                                var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14];
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ident, params, body) {
                  return new FunctionDecl(ident, params, body);
              })(result1[3], result1[5], result1[9])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("function declaration");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_param_list() {
        var cacheKey = 'param_list@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_comma_seperated_identifiers();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(params) { return new ParamList(params); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("parameter list");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comma_seperated_identifiers() {
        var cacheKey = 'comma_seperated_identifiers@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result8 = parse__();
        if (result8 !== null) {
          var result9 = parse_identifier();
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result11 !== null) {
                var result12 = parse__();
                if (result12 !== null) {
                  var result6 = [result8, result9, result10, result11, result12];
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
        } else {
          var result6 = null;
          pos = savedPos3;
        }
        var result7 = result6 !== null
          ? (function(i) {return i;})(result6[1])
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        while (result5 !== null) {
          result3.push(result5);
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            var result9 = parse_identifier();
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse__();
                  if (result12 !== null) {
                    var result6 = [result8, result9, result10, result11, result12];
                  } else {
                    var result6 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(i) {return i;})(result6[1])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        }
        if (result3 !== null) {
          var result4 = parse_identifier();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, last) {
                  return start.concat(last);
              })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comma-separated identifiers");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_function_body() {
        var cacheKey = 'function_body@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        var result1 = parse_statement();
        while (result1 !== null) {
          result0.push(result1);
          var result1 = parse_statement();
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("function body");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stmt_or_block() {
        var cacheKey = 'stmt_or_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse_$();
        if (result9 !== null) {
          var result10 = parse_statement();
          if (result10 !== null) {
            var result7 = [result9, result10];
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(x) { return x; })(result7[1])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_stmt_block();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("statement or block");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_stmt_block() {
        var cacheKey = 'stmt_block@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "{") {
          var result3 = "{";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"{\"");
          }
        }
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = [];
            var result8 = parse_statement();
            while (result8 !== null) {
              result5.push(result8);
              var result8 = parse_statement();
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "}") {
                  var result7 = "}";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"}\"");
                  }
                }
                if (result7 !== null) {
                  var result1 = [result3, result4, result5, result6, result7];
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stmts) {
                  return new StatementBlock((stmts === "") ? [] : stmts);
              })(result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("statement block");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_statement() {
        var cacheKey = 'statement@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result7 = parse_empty_stmt();
        if (result7 !== null) {
          var result0 = result7;
        } else {
          var result6 = parse_expression_stmt();
          if (result6 !== null) {
            var result0 = result6;
          } else {
            var result5 = parse_if_stmt();
            if (result5 !== null) {
              var result0 = result5;
            } else {
              var result4 = parse_iteration_stmt();
              if (result4 !== null) {
                var result0 = result4;
              } else {
                var result3 = parse_continue_stmt();
                if (result3 !== null) {
                  var result0 = result3;
                } else {
                  var result2 = parse_break_stmt();
                  if (result2 !== null) {
                    var result0 = result2;
                  } else {
                    var result1 = parse_return_stmt();
                    if (result1 !== null) {
                      var result0 = result1;
                    } else {
                      var result0 = null;;
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_empty_stmt() {
        var cacheKey = 'empty_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 1) === ";") {
            var result4 = ";";
            pos += 1;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\";\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new EmptyStatement(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("empty statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression_stmt() {
        var cacheKey = 'expression_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          var result4 = parse_expression();
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result6 = ";";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(exp) { return new ExpressionStatement(exp); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("expression statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_if_stmt() {
        var cacheKey = 'if_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result16 = parse__();
        if (result16 !== null) {
          if (input.substr(pos, 2) === "if") {
            var result17 = "if";
            pos += 2;
          } else {
            var result17 = null;
            if (reportMatchFailures) {
              matchFailed("\"if\"");
            }
          }
          if (result17 !== null) {
            var result18 = parse__();
            if (result18 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result19 = "(";
                pos += 1;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result19 !== null) {
                var result20 = parse_expression();
                if (result20 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result21 = ")";
                    pos += 1;
                  } else {
                    var result21 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result21 !== null) {
                    var result22 = parse_stmt_or_block();
                    if (result22 !== null) {
                      var result23 = parse__();
                      if (result23 !== null) {
                        if (input.substr(pos, 4) === "else") {
                          var result24 = "else";
                          pos += 4;
                        } else {
                          var result24 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"else\"");
                          }
                        }
                        if (result24 !== null) {
                          var result25 = parse_stmt_or_block();
                          if (result25 !== null) {
                            var result14 = [result16, result17, result18, result19, result20, result21, result22, result23, result24, result25];
                          } else {
                            var result14 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result14 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result14 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result14 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result14 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result14 = null;
                  pos = savedPos3;
                }
              } else {
                var result14 = null;
                pos = savedPos3;
              }
            } else {
              var result14 = null;
              pos = savedPos3;
            }
          } else {
            var result14 = null;
            pos = savedPos3;
          }
        } else {
          var result14 = null;
          pos = savedPos3;
        }
        var result15 = result14 !== null
          ? (function(cond, stmt, el) {
                  return new IfStatement(cond, stmt, el);
              })(result14[4], result14[6], result14[9])
          : null;
        if (result15 !== null) {
          var result13 = result15;
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 2) === "if") {
              var result5 = "if";
              pos += 2;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"if\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result7 = "(";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result9 = parse_expression();
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === ")") {
                          var result11 = ")";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\")\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse_stmt_or_block();
                          if (result12 !== null) {
                            var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12];
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(cond, stmt) {
                    return new IfStatement(cond, stmt, undefined);
                })(result2[5], result2[8])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("if statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_iteration_stmt() {
        var cacheKey = 'iteration_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result3 = parse_do_while_stmt();
        if (result3 !== null) {
          var result0 = result3;
        } else {
          var result2 = parse_while_stmt();
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_for_stmt();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("iteration statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_do_while_stmt() {
        var cacheKey = 'do_while_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 2) === "do") {
            var result4 = "do";
            pos += 2;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"do\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_stmt_or_block();
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 5) === "while") {
                  var result7 = "while";
                  pos += 5;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"while\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    if (input.substr(pos, 1) === "(") {
                      var result9 = "(";
                      pos += 1;
                    } else {
                      var result9 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"(\"");
                      }
                    }
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        var result11 = parse_expression();
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            if (input.substr(pos, 1) === ")") {
                              var result13 = ")";
                              pos += 1;
                            } else {
                              var result13 = null;
                              if (reportMatchFailures) {
                                matchFailed("\")\"");
                              }
                            }
                            if (result13 !== null) {
                              var result14 = parse__();
                              if (result14 !== null) {
                                if (input.substr(pos, 1) === ";") {
                                  var result15 = ";";
                                  pos += 1;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\";\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result16 = parse__();
                                  if (result16 !== null) {
                                    var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16];
                                  } else {
                                    var result1 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result1 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result1 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result1 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result1 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(stmt, cond) {
                  return new DoWhileStatement(stmt, cond);
              })(result1[2], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("do-while statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_while_stmt() {
        var cacheKey = 'while_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 5) === "while") {
            var result4 = "while";
            pos += 5;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"while\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result6 = "(";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  var result8 = parse_expression();
                  if (result8 !== null) {
                    var result9 = parse__();
                    if (result9 !== null) {
                      if (input.substr(pos, 1) === ")") {
                        var result10 = ")";
                        pos += 1;
                      } else {
                        var result10 = null;
                        if (reportMatchFailures) {
                          matchFailed("\")\"");
                        }
                      }
                      if (result10 !== null) {
                        var result11 = parse_stmt_or_block();
                        if (result11 !== null) {
                          var result1 = [result3, result4, result5, result6, result7, result8, result9, result10, result11];
                        } else {
                          var result1 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result1 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result1 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(cond, stmt) {
                  return new WhileStatement(cond, stmt);
              })(result1[5], result1[8])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("while statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_for_stmt() {
        var cacheKey = 'for_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result24 = parse__();
        if (result24 !== null) {
          if (input.substr(pos, 3) === "for") {
            var result25 = "for";
            pos += 3;
          } else {
            var result25 = null;
            if (reportMatchFailures) {
              matchFailed("\"for\"");
            }
          }
          if (result25 !== null) {
            var result26 = parse__();
            if (result26 !== null) {
              if (input.substr(pos, 1) === "(") {
                var result27 = "(";
                pos += 1;
              } else {
                var result27 = null;
                if (reportMatchFailures) {
                  matchFailed("\"(\"");
                }
              }
              if (result27 !== null) {
                var result28 = parse__();
                if (result28 !== null) {
                  var result29 = parse_lvalue_expression();
                  if (result29 !== null) {
                    var result30 = parse__();
                    if (result30 !== null) {
                      if (input.substr(pos, 1) === "=") {
                        var result31 = "=";
                        pos += 1;
                      } else {
                        var result31 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"=\"");
                        }
                      }
                      if (result31 !== null) {
                        var result32 = parse__();
                        if (result32 !== null) {
                          var result33 = parse_additive();
                          if (result33 !== null) {
                            var result34 = parse_$();
                            if (result34 !== null) {
                              if (input.substr(pos, 2) === "to") {
                                var result35 = "to";
                                pos += 2;
                              } else {
                                var result35 = null;
                                if (reportMatchFailures) {
                                  matchFailed("\"to\"");
                                }
                              }
                              if (result35 !== null) {
                                var result36 = parse_$();
                                if (result36 !== null) {
                                  var result37 = parse_additive();
                                  if (result37 !== null) {
                                    var result38 = parse_$();
                                    if (result38 !== null) {
                                      if (input.substr(pos, 4) === "step") {
                                        var result39 = "step";
                                        pos += 4;
                                      } else {
                                        var result39 = null;
                                        if (reportMatchFailures) {
                                          matchFailed("\"step\"");
                                        }
                                      }
                                      if (result39 !== null) {
                                        var result40 = parse_$();
                                        if (result40 !== null) {
                                          var result41 = parse_additive();
                                          if (result41 !== null) {
                                            var result42 = parse__();
                                            if (result42 !== null) {
                                              if (input.substr(pos, 1) === ")") {
                                                var result43 = ")";
                                                pos += 1;
                                              } else {
                                                var result43 = null;
                                                if (reportMatchFailures) {
                                                  matchFailed("\")\"");
                                                }
                                              }
                                              if (result43 !== null) {
                                                var result44 = parse_stmt_or_block();
                                                if (result44 !== null) {
                                                  var result22 = [result24, result25, result26, result27, result28, result29, result30, result31, result32, result33, result34, result35, result36, result37, result38, result39, result40, result41, result42, result43, result44];
                                                } else {
                                                  var result22 = null;
                                                  pos = savedPos3;
                                                }
                                              } else {
                                                var result22 = null;
                                                pos = savedPos3;
                                              }
                                            } else {
                                              var result22 = null;
                                              pos = savedPos3;
                                            }
                                          } else {
                                            var result22 = null;
                                            pos = savedPos3;
                                          }
                                        } else {
                                          var result22 = null;
                                          pos = savedPos3;
                                        }
                                      } else {
                                        var result22 = null;
                                        pos = savedPos3;
                                      }
                                    } else {
                                      var result22 = null;
                                      pos = savedPos3;
                                    }
                                  } else {
                                    var result22 = null;
                                    pos = savedPos3;
                                  }
                                } else {
                                  var result22 = null;
                                  pos = savedPos3;
                                }
                              } else {
                                var result22 = null;
                                pos = savedPos3;
                              }
                            } else {
                              var result22 = null;
                              pos = savedPos3;
                            }
                          } else {
                            var result22 = null;
                            pos = savedPos3;
                          }
                        } else {
                          var result22 = null;
                          pos = savedPos3;
                        }
                      } else {
                        var result22 = null;
                        pos = savedPos3;
                      }
                    } else {
                      var result22 = null;
                      pos = savedPos3;
                    }
                  } else {
                    var result22 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result22 = null;
                  pos = savedPos3;
                }
              } else {
                var result22 = null;
                pos = savedPos3;
              }
            } else {
              var result22 = null;
              pos = savedPos3;
            }
          } else {
            var result22 = null;
            pos = savedPos3;
          }
        } else {
          var result22 = null;
          pos = savedPos3;
        }
        var result23 = result22 !== null
          ? (function(iter, init, end, step, stmt) {
                  return new ForStatement(iter, init, end, step, stmt);
              })(result22[5], result22[9], result22[13], result22[17], result22[20])
          : null;
        if (result23 !== null) {
          var result21 = result23;
        } else {
          var result21 = null;
          pos = savedPos2;
        }
        if (result21 !== null) {
          var result0 = result21;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            if (input.substr(pos, 3) === "for") {
              var result5 = "for";
              pos += 3;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\"for\"");
              }
            }
            if (result5 !== null) {
              var result6 = parse__();
              if (result6 !== null) {
                if (input.substr(pos, 1) === "(") {
                  var result7 = "(";
                  pos += 1;
                } else {
                  var result7 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"(\"");
                  }
                }
                if (result7 !== null) {
                  var result8 = parse__();
                  if (result8 !== null) {
                    var result9 = parse_lvalue_expression();
                    if (result9 !== null) {
                      var result10 = parse__();
                      if (result10 !== null) {
                        if (input.substr(pos, 1) === "=") {
                          var result11 = "=";
                          pos += 1;
                        } else {
                          var result11 = null;
                          if (reportMatchFailures) {
                            matchFailed("\"=\"");
                          }
                        }
                        if (result11 !== null) {
                          var result12 = parse__();
                          if (result12 !== null) {
                            var result13 = parse_additive();
                            if (result13 !== null) {
                              var result14 = parse_$();
                              if (result14 !== null) {
                                if (input.substr(pos, 2) === "to") {
                                  var result15 = "to";
                                  pos += 2;
                                } else {
                                  var result15 = null;
                                  if (reportMatchFailures) {
                                    matchFailed("\"to\"");
                                  }
                                }
                                if (result15 !== null) {
                                  var result16 = parse_$();
                                  if (result16 !== null) {
                                    var result17 = parse_additive();
                                    if (result17 !== null) {
                                      var result18 = parse__();
                                      if (result18 !== null) {
                                        if (input.substr(pos, 1) === ")") {
                                          var result19 = ")";
                                          pos += 1;
                                        } else {
                                          var result19 = null;
                                          if (reportMatchFailures) {
                                            matchFailed("\")\"");
                                          }
                                        }
                                        if (result19 !== null) {
                                          var result20 = parse_stmt_or_block();
                                          if (result20 !== null) {
                                            var result2 = [result4, result5, result6, result7, result8, result9, result10, result11, result12, result13, result14, result15, result16, result17, result18, result19, result20];
                                          } else {
                                            var result2 = null;
                                            pos = savedPos1;
                                          }
                                        } else {
                                          var result2 = null;
                                          pos = savedPos1;
                                        }
                                      } else {
                                        var result2 = null;
                                        pos = savedPos1;
                                      }
                                    } else {
                                      var result2 = null;
                                      pos = savedPos1;
                                    }
                                  } else {
                                    var result2 = null;
                                    pos = savedPos1;
                                  }
                                } else {
                                  var result2 = null;
                                  pos = savedPos1;
                                }
                              } else {
                                var result2 = null;
                                pos = savedPos1;
                              }
                            } else {
                              var result2 = null;
                              pos = savedPos1;
                            }
                          } else {
                            var result2 = null;
                            pos = savedPos1;
                          }
                        } else {
                          var result2 = null;
                          pos = savedPos1;
                        }
                      } else {
                        var result2 = null;
                        pos = savedPos1;
                      }
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(iter, init, end, stmt) {
                    return new ForStatement(iter, init, end, undefined, stmt);
                })(result2[5], result2[9], result2[13], result2[16])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("for statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_continue_stmt() {
        var cacheKey = 'continue_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 8) === "continue") {
            var result4 = "continue";
            pos += 8;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"continue\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result6 = ";";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new ContinueStatement(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("continue statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_break_stmt() {
        var cacheKey = 'break_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 5) === "break") {
            var result4 = "break";
            pos += 5;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"break\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse__();
            if (result5 !== null) {
              if (input.substr(pos, 1) === ";") {
                var result6 = ";";
                pos += 1;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("\";\"");
                }
              }
              if (result6 !== null) {
                var result1 = [result3, result4, result5, result6];
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function() { return new BreakStatement(); })()
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("break statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_return_stmt() {
        var cacheKey = 'return_stmt@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse__();
        if (result3 !== null) {
          if (input.substr(pos, 6) === "return") {
            var result4 = "return";
            pos += 6;
          } else {
            var result4 = null;
            if (reportMatchFailures) {
              matchFailed("\"return\"");
            }
          }
          if (result4 !== null) {
            var result5 = parse_$();
            if (result5 !== null) {
              var result9 = parse_expression();
              var result6 = result9 !== null ? result9 : '';
              if (result6 !== null) {
                var result7 = parse__();
                if (result7 !== null) {
                  if (input.substr(pos, 1) === ";") {
                    var result8 = ";";
                    pos += 1;
                  } else {
                    var result8 = null;
                    if (reportMatchFailures) {
                      matchFailed("\";\"");
                    }
                  }
                  if (result8 !== null) {
                    var result1 = [result3, result4, result5, result6, result7, result8];
                  } else {
                    var result1 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result1 = null;
                  pos = savedPos1;
                }
              } else {
                var result1 = null;
                pos = savedPos1;
              }
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(ret) {
                  return new ReturnStatement(ret);
              })(result1[3])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("return statement");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_expression() {
        var cacheKey = 'expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_assignment();
        var result2 = result1 !== null
          ? (function(x) { return x; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_call_expression() {
        var cacheKey = 'call_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = parse_identifier();
        if (result3 !== null) {
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_arguments();
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(callee, args) { return new CallExpression(callee, args); })(result1[0], result1[2])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("call expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_arguments() {
        var cacheKey = 'arguments@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        
        var savedPos0 = pos;
        var savedPos1 = pos;
        if (input.substr(pos, 1) === "(") {
          var result3 = "(";
          pos += 1;
        } else {
          var result3 = null;
          if (reportMatchFailures) {
            matchFailed("\"(\"");
          }
        }
        if (result3 !== null) {
          var result6 = parse_comma_separated_args();
          var result4 = result6 !== null ? result6 : '';
          if (result4 !== null) {
            if (input.substr(pos, 1) === ")") {
              var result5 = ")";
              pos += 1;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed("\")\"");
              }
            }
            if (result5 !== null) {
              var result1 = [result3, result4, result5];
            } else {
              var result1 = null;
              pos = savedPos1;
            }
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(args) { return new Arguments((args === "") ? [] : args); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        
        
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comma_separated_args() {
        var cacheKey = 'comma_separated_args@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var result3 = [];
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result8 = parse__();
        if (result8 !== null) {
          var result9 = parse_expression();
          if (result9 !== null) {
            var result10 = parse__();
            if (result10 !== null) {
              if (input.substr(pos, 1) === ",") {
                var result11 = ",";
                pos += 1;
              } else {
                var result11 = null;
                if (reportMatchFailures) {
                  matchFailed("\",\"");
                }
              }
              if (result11 !== null) {
                var result12 = parse__();
                if (result12 !== null) {
                  var result6 = [result8, result9, result10, result11, result12];
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
        } else {
          var result6 = null;
          pos = savedPos3;
        }
        var result7 = result6 !== null
          ? (function(i) {return i;})(result6[1])
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos2;
        }
        while (result5 !== null) {
          result3.push(result5);
          var savedPos2 = pos;
          var savedPos3 = pos;
          var result8 = parse__();
          if (result8 !== null) {
            var result9 = parse_expression();
            if (result9 !== null) {
              var result10 = parse__();
              if (result10 !== null) {
                if (input.substr(pos, 1) === ",") {
                  var result11 = ",";
                  pos += 1;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("\",\"");
                  }
                }
                if (result11 !== null) {
                  var result12 = parse__();
                  if (result12 !== null) {
                    var result6 = [result8, result9, result10, result11, result12];
                  } else {
                    var result6 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result6 = null;
                  pos = savedPos3;
                }
              } else {
                var result6 = null;
                pos = savedPos3;
              }
            } else {
              var result6 = null;
              pos = savedPos3;
            }
          } else {
            var result6 = null;
            pos = savedPos3;
          }
          var result7 = result6 !== null
            ? (function(i) {return i;})(result6[1])
            : null;
          if (result7 !== null) {
            var result5 = result7;
          } else {
            var result5 = null;
            pos = savedPos2;
          }
        }
        if (result3 !== null) {
          var result4 = parse_expression();
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(start, last) { return start.concat(last); })(result1[0], result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comma-separated arguments");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_assignment() {
        var cacheKey = 'assignment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_lvalue_expression();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 1) === "=") {
                var result12 = "=";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"=\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_assignment();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_logical_or();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("assignment expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_or() {
        var cacheKey = 'logical_or@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_logical_and();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 2) === "||") {
                var result16 = "||";
                pos += 2;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"||\"");
                }
              }
              if (result16 !== null) {
                var result12 = result16;
              } else {
                if (input.substr(pos, 1) === "^") {
                  var result15 = "^";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"^\"");
                  }
                }
                if (result15 !== null) {
                  var result12 = result15;
                } else {
                  var result12 = null;;
                };
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_logical_and();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_logical_and();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("logical OR expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_logical_and() {
        var cacheKey = 'logical_and@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_equality();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 2) === "&&") {
                var result12 = "&&";
                pos += 2;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"&&\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_logical_and();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);  
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_equality();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("logical AND expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_equality() {
        var cacheKey = 'equality@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_relational();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 2) === "==") {
                var result16 = "==";
                pos += 2;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"==\"");
                }
              }
              if (result16 !== null) {
                var result12 = result16;
              } else {
                if (input.substr(pos, 2) === "!=") {
                  var result15 = "!=";
                  pos += 2;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"!=\"");
                  }
                }
                if (result15 !== null) {
                  var result12 = result15;
                } else {
                  var result12 = null;;
                };
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_equality();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_relational();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("equality expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_relational() {
        var cacheKey = 'relational@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_additive();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 1) === "<") {
                var result18 = "<";
                pos += 1;
              } else {
                var result18 = null;
                if (reportMatchFailures) {
                  matchFailed("\"<\"");
                }
              }
              if (result18 !== null) {
                var result12 = result18;
              } else {
                if (input.substr(pos, 1) === ">") {
                  var result17 = ">";
                  pos += 1;
                } else {
                  var result17 = null;
                  if (reportMatchFailures) {
                    matchFailed("\">\"");
                  }
                }
                if (result17 !== null) {
                  var result12 = result17;
                } else {
                  if (input.substr(pos, 2) === "<=") {
                    var result16 = "<=";
                    pos += 2;
                  } else {
                    var result16 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"<=\"");
                    }
                  }
                  if (result16 !== null) {
                    var result12 = result16;
                  } else {
                    if (input.substr(pos, 2) === ">=") {
                      var result15 = ">=";
                      pos += 2;
                    } else {
                      var result15 = null;
                      if (reportMatchFailures) {
                        matchFailed("\">=\"");
                      }
                    }
                    if (result15 !== null) {
                      var result12 = result15;
                    } else {
                      var result12 = null;;
                    };
                  };
                };
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_relational();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_additive();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("relational expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_additive() {
        var cacheKey = 'additive@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_multiplicative();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 1) === "+") {
                var result16 = "+";
                pos += 1;
              } else {
                var result16 = null;
                if (reportMatchFailures) {
                  matchFailed("\"+\"");
                }
              }
              if (result16 !== null) {
                var result12 = result16;
              } else {
                if (input.substr(pos, 1) === "-") {
                  var result15 = "-";
                  pos += 1;
                } else {
                  var result15 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"-\"");
                  }
                }
                if (result15 !== null) {
                  var result12 = result15;
                } else {
                  var result12 = null;;
                };
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_additive();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_multiplicative();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("additive expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_multiplicative() {
        var cacheKey = 'multiplicative@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        var savedPos3 = pos;
        var result9 = parse__();
        if (result9 !== null) {
          var result10 = parse_unary();
          if (result10 !== null) {
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 1) === "*") {
                var result17 = "*";
                pos += 1;
              } else {
                var result17 = null;
                if (reportMatchFailures) {
                  matchFailed("\"*\"");
                }
              }
              if (result17 !== null) {
                var result12 = result17;
              } else {
                if (input.substr(pos, 1) === "/") {
                  var result16 = "/";
                  pos += 1;
                } else {
                  var result16 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"/\"");
                  }
                }
                if (result16 !== null) {
                  var result12 = result16;
                } else {
                  if (input.substr(pos, 1) === "%") {
                    var result15 = "%";
                    pos += 1;
                  } else {
                    var result15 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"%\"");
                    }
                  }
                  if (result15 !== null) {
                    var result12 = result15;
                  } else {
                    var result12 = null;;
                  };
                };
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_multiplicative();
                  if (result14 !== null) {
                    var result7 = [result9, result10, result11, result12, result13, result14];
                  } else {
                    var result7 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result7 = null;
                  pos = savedPos3;
                }
              } else {
                var result7 = null;
                pos = savedPos3;
              }
            } else {
              var result7 = null;
              pos = savedPos3;
            }
          } else {
            var result7 = null;
            pos = savedPos3;
          }
        } else {
          var result7 = null;
          pos = savedPos3;
        }
        var result8 = result7 !== null
          ? (function(l, op, r) {
                  return new Binary(op, l, r);
              })(result7[1], result7[3], result7[5])
          : null;
        if (result8 !== null) {
          var result6 = result8;
        } else {
          var result6 = null;
          pos = savedPos2;
        }
        if (result6 !== null) {
          var result0 = result6;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result4 = parse__();
          if (result4 !== null) {
            var result5 = parse_unary();
            if (result5 !== null) {
              var result2 = [result4, result5];
            } else {
              var result2 = null;
              pos = savedPos1;
            }
          } else {
            var result2 = null;
            pos = savedPos1;
          }
          var result3 = result2 !== null
            ? (function(x) { return x; })(result2[1])
            : null;
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("multiplicative expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_unary() {
        var cacheKey = 'unary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos6 = pos;
        var savedPos7 = pos;
        var result25 = parse__();
        if (result25 !== null) {
          var result26 = parse_primary();
          if (result26 !== null) {
            var result23 = [result25, result26];
          } else {
            var result23 = null;
            pos = savedPos7;
          }
        } else {
          var result23 = null;
          pos = savedPos7;
        }
        var result24 = result23 !== null
          ? (function(x) { return x; })(result23[1])
          : null;
        if (result24 !== null) {
          var result22 = result24;
        } else {
          var result22 = null;
          pos = savedPos6;
        }
        if (result22 !== null) {
          var result0 = result22;
        } else {
          var savedPos4 = pos;
          var savedPos5 = pos;
          var result18 = parse__();
          if (result18 !== null) {
            if (input.substr(pos, 1) === "!") {
              var result19 = "!";
              pos += 1;
            } else {
              var result19 = null;
              if (reportMatchFailures) {
                matchFailed("\"!\"");
              }
            }
            if (result19 !== null) {
              var result20 = parse__();
              if (result20 !== null) {
                var result21 = parse_unary();
                if (result21 !== null) {
                  var result16 = [result18, result19, result20, result21];
                } else {
                  var result16 = null;
                  pos = savedPos5;
                }
              } else {
                var result16 = null;
                pos = savedPos5;
              }
            } else {
              var result16 = null;
              pos = savedPos5;
            }
          } else {
            var result16 = null;
            pos = savedPos5;
          }
          var result17 = result16 !== null
            ? (function(x) { return new Unary('!', x); })(result16[3])
            : null;
          if (result17 !== null) {
            var result15 = result17;
          } else {
            var result15 = null;
            pos = savedPos4;
          }
          if (result15 !== null) {
            var result0 = result15;
          } else {
            var savedPos2 = pos;
            var savedPos3 = pos;
            var result11 = parse__();
            if (result11 !== null) {
              if (input.substr(pos, 1) === "-") {
                var result12 = "-";
                pos += 1;
              } else {
                var result12 = null;
                if (reportMatchFailures) {
                  matchFailed("\"-\"");
                }
              }
              if (result12 !== null) {
                var result13 = parse__();
                if (result13 !== null) {
                  var result14 = parse_unary();
                  if (result14 !== null) {
                    var result9 = [result11, result12, result13, result14];
                  } else {
                    var result9 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result9 = null;
                  pos = savedPos3;
                }
              } else {
                var result9 = null;
                pos = savedPos3;
              }
            } else {
              var result9 = null;
              pos = savedPos3;
            }
            var result10 = result9 !== null
              ? (function(x) { return new Unary('-', x); })(result9[3])
              : null;
            if (result10 !== null) {
              var result8 = result10;
            } else {
              var result8 = null;
              pos = savedPos2;
            }
            if (result8 !== null) {
              var result0 = result8;
            } else {
              var savedPos0 = pos;
              var savedPos1 = pos;
              var result4 = parse__();
              if (result4 !== null) {
                if (input.substr(pos, 1) === "+") {
                  var result5 = "+";
                  pos += 1;
                } else {
                  var result5 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"+\"");
                  }
                }
                if (result5 !== null) {
                  var result6 = parse__();
                  if (result6 !== null) {
                    var result7 = parse_unary();
                    if (result7 !== null) {
                      var result2 = [result4, result5, result6, result7];
                    } else {
                      var result2 = null;
                      pos = savedPos1;
                    }
                  } else {
                    var result2 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result2 = null;
                  pos = savedPos1;
                }
              } else {
                var result2 = null;
                pos = savedPos1;
              }
              var result3 = result2 !== null
                ? (function(x) { return new Unary('+', x); })(result2[3])
                : null;
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result1 = null;
                pos = savedPos0;
              }
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("unary expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_lvalue_expression() {
        var cacheKey = 'lvalue_expression@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_identifier();
        var result2 = result1 !== null
          ? (function(x) { return x; })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("left-value expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_primary() {
        var cacheKey = 'primary@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result11 = parse_literal();
        if (result11 !== null) {
          var result0 = result11;
        } else {
          var savedPos0 = pos;
          var savedPos1 = pos;
          var result6 = parse__();
          if (result6 !== null) {
            if (input.substr(pos, 1) === "(") {
              var result7 = "(";
              pos += 1;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"(\"");
              }
            }
            if (result7 !== null) {
              var result8 = parse_expression();
              if (result8 !== null) {
                var result9 = parse__();
                if (result9 !== null) {
                  if (input.substr(pos, 1) === ")") {
                    var result10 = ")";
                    pos += 1;
                  } else {
                    var result10 = null;
                    if (reportMatchFailures) {
                      matchFailed("\")\"");
                    }
                  }
                  if (result10 !== null) {
                    var result4 = [result6, result7, result8, result9, result10];
                  } else {
                    var result4 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result4 = null;
                  pos = savedPos1;
                }
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          var result5 = result4 !== null
            ? (function(exp) { return exp; })(result4[2])
            : null;
          if (result5 !== null) {
            var result3 = result5;
          } else {
            var result3 = null;
            pos = savedPos0;
          }
          if (result3 !== null) {
            var result0 = result3;
          } else {
            var result2 = parse_call_expression();
            if (result2 !== null) {
              var result0 = result2;
            } else {
              var result1 = parse_identifier();
              if (result1 !== null) {
                var result0 = result1;
              } else {
                var result0 = null;;
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("primary expression");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_literal() {
        var cacheKey = 'literal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos1 = pos;
        if (input.substr(pos, 4) === "true") {
          var result6 = "true";
          pos += 4;
        } else {
          var result6 = null;
          if (reportMatchFailures) {
            matchFailed("\"true\"");
          }
        }
        var result7 = result6 !== null
          ? (function() { return new Literal(true); })()
          : null;
        if (result7 !== null) {
          var result5 = result7;
        } else {
          var result5 = null;
          pos = savedPos1;
        }
        if (result5 !== null) {
          var result0 = result5;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos, 5) === "false") {
            var result3 = "false";
            pos += 5;
          } else {
            var result3 = null;
            if (reportMatchFailures) {
              matchFailed("\"false\"");
            }
          }
          var result4 = result3 !== null
            ? (function() { return new Literal(false); })()
            : null;
          if (result4 !== null) {
            var result2 = result4;
          } else {
            var result2 = null;
            pos = savedPos0;
          }
          if (result2 !== null) {
            var result0 = result2;
          } else {
            var result1 = parse_numeric();
            if (result1 !== null) {
              var result0 = result1;
            } else {
              var result0 = null;;
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_numeric() {
        var cacheKey = 'numeric@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var result1 = parse_decimal();
        var result2 = result1 !== null
          ? (function(x) { return new Literal(parseFloat(Q.flatten(x))); })(result1)
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("numeric literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_decimal() {
        var cacheKey = 'decimal@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos2 = pos;
        if (input.substr(pos).match(/^[0-9]/) !== null) {
          var result25 = input.charAt(pos);
          pos++;
        } else {
          var result25 = null;
          if (reportMatchFailures) {
            matchFailed("[0-9]");
          }
        }
        if (result25 !== null) {
          var result14 = [];
          while (result25 !== null) {
            result14.push(result25);
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result25 = input.charAt(pos);
              pos++;
            } else {
              var result25 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
          }
        } else {
          var result14 = null;
        }
        if (result14 !== null) {
          if (input.substr(pos).match(/^[.]/) !== null) {
            var result15 = input.charAt(pos);
            pos++;
          } else {
            var result15 = null;
            if (reportMatchFailures) {
              matchFailed("[.]");
            }
          }
          if (result15 !== null) {
            var result16 = [];
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result24 = input.charAt(pos);
              pos++;
            } else {
              var result24 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            while (result24 !== null) {
              result16.push(result24);
              if (input.substr(pos).match(/^[0-9]/) !== null) {
                var result24 = input.charAt(pos);
                pos++;
              } else {
                var result24 = null;
                if (reportMatchFailures) {
                  matchFailed("[0-9]");
                }
              }
            }
            if (result16 !== null) {
              var savedPos3 = pos;
              if (input.substr(pos).match(/^[eE]/) !== null) {
                var result19 = input.charAt(pos);
                pos++;
              } else {
                var result19 = null;
                if (reportMatchFailures) {
                  matchFailed("[eE]");
                }
              }
              if (result19 !== null) {
                if (input.substr(pos).match(/^[+\-]/) !== null) {
                  var result23 = input.charAt(pos);
                  pos++;
                } else {
                  var result23 = null;
                  if (reportMatchFailures) {
                    matchFailed("[+\\-]");
                  }
                }
                var result20 = result23 !== null ? result23 : '';
                if (result20 !== null) {
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result22 = input.charAt(pos);
                    pos++;
                  } else {
                    var result22 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result22 !== null) {
                    var result21 = [];
                    while (result22 !== null) {
                      result21.push(result22);
                      if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result22 = input.charAt(pos);
                        pos++;
                      } else {
                        var result22 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9]");
                        }
                      }
                    }
                  } else {
                    var result21 = null;
                  }
                  if (result21 !== null) {
                    var result18 = [result19, result20, result21];
                  } else {
                    var result18 = null;
                    pos = savedPos3;
                  }
                } else {
                  var result18 = null;
                  pos = savedPos3;
                }
              } else {
                var result18 = null;
                pos = savedPos3;
              }
              var result17 = result18 !== null ? result18 : '';
              if (result17 !== null) {
                var result13 = [result14, result15, result16, result17];
              } else {
                var result13 = null;
                pos = savedPos2;
              }
            } else {
              var result13 = null;
              pos = savedPos2;
            }
          } else {
            var result13 = null;
            pos = savedPos2;
          }
        } else {
          var result13 = null;
          pos = savedPos2;
        }
        if (result13 !== null) {
          var result0 = result13;
        } else {
          var savedPos0 = pos;
          if (input.substr(pos).match(/^[.]/) !== null) {
            var result12 = input.charAt(pos);
            pos++;
          } else {
            var result12 = null;
            if (reportMatchFailures) {
              matchFailed("[.]");
            }
          }
          var result2 = result12 !== null ? result12 : '';
          if (result2 !== null) {
            if (input.substr(pos).match(/^[0-9]/) !== null) {
              var result11 = input.charAt(pos);
              pos++;
            } else {
              var result11 = null;
              if (reportMatchFailures) {
                matchFailed("[0-9]");
              }
            }
            if (result11 !== null) {
              var result3 = [];
              while (result11 !== null) {
                result3.push(result11);
                if (input.substr(pos).match(/^[0-9]/) !== null) {
                  var result11 = input.charAt(pos);
                  pos++;
                } else {
                  var result11 = null;
                  if (reportMatchFailures) {
                    matchFailed("[0-9]");
                  }
                }
              }
            } else {
              var result3 = null;
            }
            if (result3 !== null) {
              var savedPos1 = pos;
              if (input.substr(pos).match(/^[eE]/) !== null) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed("[eE]");
                }
              }
              if (result6 !== null) {
                if (input.substr(pos).match(/^[+\-]/) !== null) {
                  var result10 = input.charAt(pos);
                  pos++;
                } else {
                  var result10 = null;
                  if (reportMatchFailures) {
                    matchFailed("[+\\-]");
                  }
                }
                var result7 = result10 !== null ? result10 : '';
                if (result7 !== null) {
                  if (input.substr(pos).match(/^[0-9]/) !== null) {
                    var result9 = input.charAt(pos);
                    pos++;
                  } else {
                    var result9 = null;
                    if (reportMatchFailures) {
                      matchFailed("[0-9]");
                    }
                  }
                  if (result9 !== null) {
                    var result8 = [];
                    while (result9 !== null) {
                      result8.push(result9);
                      if (input.substr(pos).match(/^[0-9]/) !== null) {
                        var result9 = input.charAt(pos);
                        pos++;
                      } else {
                        var result9 = null;
                        if (reportMatchFailures) {
                          matchFailed("[0-9]");
                        }
                      }
                    }
                  } else {
                    var result8 = null;
                  }
                  if (result8 !== null) {
                    var result5 = [result6, result7, result8];
                  } else {
                    var result5 = null;
                    pos = savedPos1;
                  }
                } else {
                  var result5 = null;
                  pos = savedPos1;
                }
              } else {
                var result5 = null;
                pos = savedPos1;
              }
              var result4 = result5 !== null ? result5 : '';
              if (result4 !== null) {
                var result1 = [result2, result3, result4];
              } else {
                var result1 = null;
                pos = savedPos0;
              }
            } else {
              var result1 = null;
              pos = savedPos0;
            }
          } else {
            var result1 = null;
            pos = savedPos0;
          }
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("decimal numeric literal");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_identifier() {
        var cacheKey = 'identifier@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        var savedPos1 = pos;
        var savedPos3 = pos;
        var savedReportMatchFailuresVar0 = reportMatchFailures;
        reportMatchFailures = false;
        var result8 = parse_keyword();
        reportMatchFailures = savedReportMatchFailuresVar0;
        if (result8 === null) {
          var result3 = '';
        } else {
          var result3 = null;
          pos = savedPos3;
        }
        if (result3 !== null) {
          var savedPos2 = pos;
          if (input.substr(pos).match(/^[_a-zA-Z]/) !== null) {
            var result5 = input.charAt(pos);
            pos++;
          } else {
            var result5 = null;
            if (reportMatchFailures) {
              matchFailed("[_a-zA-Z]");
            }
          }
          if (result5 !== null) {
            var result6 = [];
            if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
              var result7 = input.charAt(pos);
              pos++;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("[_a-zA-Z0-9]");
              }
            }
            while (result7 !== null) {
              result6.push(result7);
              if (input.substr(pos).match(/^[_a-zA-Z0-9]/) !== null) {
                var result7 = input.charAt(pos);
                pos++;
              } else {
                var result7 = null;
                if (reportMatchFailures) {
                  matchFailed("[_a-zA-Z0-9]");
                }
              }
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos2;
            }
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            var result1 = [result3, result4];
          } else {
            var result1 = null;
            pos = savedPos1;
          }
        } else {
          var result1 = null;
          pos = savedPos1;
        }
        var result2 = result1 !== null
          ? (function(x) { return new Identifier(Q.flatten(x)); })(result1[1])
          : null;
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("identifier");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_keyword() {
        var cacheKey = 'keyword@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos, 2) === "if") {
          var result8 = "if";
          pos += 2;
        } else {
          var result8 = null;
          if (reportMatchFailures) {
            matchFailed("\"if\"");
          }
        }
        if (result8 !== null) {
          var result0 = result8;
        } else {
          if (input.substr(pos, 4) === "else") {
            var result7 = "else";
            pos += 4;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"else\"");
            }
          }
          if (result7 !== null) {
            var result0 = result7;
          } else {
            if (input.substr(pos, 2) === "do") {
              var result6 = "do";
              pos += 2;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed("\"do\"");
              }
            }
            if (result6 !== null) {
              var result0 = result6;
            } else {
              if (input.substr(pos, 5) === "while") {
                var result5 = "while";
                pos += 5;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed("\"while\"");
                }
              }
              if (result5 !== null) {
                var result0 = result5;
              } else {
                if (input.substr(pos, 3) === "for") {
                  var result4 = "for";
                  pos += 3;
                } else {
                  var result4 = null;
                  if (reportMatchFailures) {
                    matchFailed("\"for\"");
                  }
                }
                if (result4 !== null) {
                  var result0 = result4;
                } else {
                  if (input.substr(pos, 8) === "continue") {
                    var result3 = "continue";
                    pos += 8;
                  } else {
                    var result3 = null;
                    if (reportMatchFailures) {
                      matchFailed("\"continue\"");
                    }
                  }
                  if (result3 !== null) {
                    var result0 = result3;
                  } else {
                    if (input.substr(pos, 5) === "break") {
                      var result2 = "break";
                      pos += 5;
                    } else {
                      var result2 = null;
                      if (reportMatchFailures) {
                        matchFailed("\"break\"");
                      }
                    }
                    if (result2 !== null) {
                      var result0 = result2;
                    } else {
                      if (input.substr(pos, 6) === "return") {
                        var result1 = "return";
                        pos += 6;
                      } else {
                        var result1 = null;
                        if (reportMatchFailures) {
                          matchFailed("\"return\"");
                        }
                      }
                      if (result1 !== null) {
                        var result0 = result1;
                      } else {
                        var result0 = null;;
                      };
                    };
                  };
                };
              };
            };
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("reserved keyword");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_comment() {
        var cacheKey = 'comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result2 = parse_block_comment();
        if (result2 !== null) {
          var result0 = result2;
        } else {
          var result1 = parse_single_comment();
          if (result1 !== null) {
            var result0 = result1;
          } else {
            var result0 = null;;
          };
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_block_comment() {
        var cacheKey = 'block_comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "/*") {
          var result1 = "/*";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"/*\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          if (input.substr(pos, 2) === "*/") {
            var result7 = "*/";
            pos += 2;
          } else {
            var result7 = null;
            if (reportMatchFailures) {
              matchFailed("\"*/\"");
            }
          }
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result7 === null) {
            var result5 = '';
          } else {
            var result5 = null;
            pos = savedPos2;
          }
          if (result5 !== null) {
            if (input.length > pos) {
              var result6 = input.charAt(pos);
              pos++;
            } else {
              var result6 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result6 !== null) {
              var result4 = [result5, result6];
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          } else {
            var result4 = null;
            pos = savedPos1;
          }
          while (result4 !== null) {
            result2.push(result4);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            if (input.substr(pos, 2) === "*/") {
              var result7 = "*/";
              pos += 2;
            } else {
              var result7 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result7 === null) {
              var result5 = '';
            } else {
              var result5 = null;
              pos = savedPos2;
            }
            if (result5 !== null) {
              if (input.length > pos) {
                var result6 = input.charAt(pos);
                pos++;
              } else {
                var result6 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result6 !== null) {
                var result4 = [result5, result6];
              } else {
                var result4 = null;
                pos = savedPos1;
              }
            } else {
              var result4 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            if (input.substr(pos, 2) === "*/") {
              var result3 = "*/";
              pos += 2;
            } else {
              var result3 = null;
              if (reportMatchFailures) {
                matchFailed("\"*/\"");
              }
            }
            if (result3 !== null) {
              var result0 = [result1, result2, result3];
            } else {
              var result0 = null;
              pos = savedPos0;
            }
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("block comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_single_comment() {
        var cacheKey = 'single_comment@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var savedPos0 = pos;
        if (input.substr(pos, 2) === "//") {
          var result1 = "//";
          pos += 2;
        } else {
          var result1 = null;
          if (reportMatchFailures) {
            matchFailed("\"//\"");
          }
        }
        if (result1 !== null) {
          var result2 = [];
          var savedPos1 = pos;
          var savedPos2 = pos;
          var savedReportMatchFailuresVar0 = reportMatchFailures;
          reportMatchFailures = false;
          var result6 = parse_linebreak();
          reportMatchFailures = savedReportMatchFailuresVar0;
          if (result6 === null) {
            var result4 = '';
          } else {
            var result4 = null;
            pos = savedPos2;
          }
          if (result4 !== null) {
            if (input.length > pos) {
              var result5 = input.charAt(pos);
              pos++;
            } else {
              var result5 = null;
              if (reportMatchFailures) {
                matchFailed('any character');
              }
            }
            if (result5 !== null) {
              var result3 = [result4, result5];
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          } else {
            var result3 = null;
            pos = savedPos1;
          }
          while (result3 !== null) {
            result2.push(result3);
            var savedPos1 = pos;
            var savedPos2 = pos;
            var savedReportMatchFailuresVar0 = reportMatchFailures;
            reportMatchFailures = false;
            var result6 = parse_linebreak();
            reportMatchFailures = savedReportMatchFailuresVar0;
            if (result6 === null) {
              var result4 = '';
            } else {
              var result4 = null;
              pos = savedPos2;
            }
            if (result4 !== null) {
              if (input.length > pos) {
                var result5 = input.charAt(pos);
                pos++;
              } else {
                var result5 = null;
                if (reportMatchFailures) {
                  matchFailed('any character');
                }
              }
              if (result5 !== null) {
                var result3 = [result4, result5];
              } else {
                var result3 = null;
                pos = savedPos1;
              }
            } else {
              var result3 = null;
              pos = savedPos1;
            }
          }
          if (result2 !== null) {
            var result0 = [result1, result2];
          } else {
            var result0 = null;
            pos = savedPos0;
          }
        } else {
          var result0 = null;
          pos = savedPos0;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("single-line comment");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_linebreak() {
        var cacheKey = 'linebreak@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[\r\n]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[\\r\\n]");
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("line break");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_whitespace() {
        var cacheKey = 'whitespace@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.substr(pos).match(/^[ 	]/) !== null) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed("[ 	]");
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse__() {
        var cacheKey = '_@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result0 = [];
        var result4 = parse_whitespace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_linebreak();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_comment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        while (result1 !== null) {
          result0.push(result1);
          var result4 = parse_whitespace();
          if (result4 !== null) {
            var result1 = result4;
          } else {
            var result3 = parse_linebreak();
            if (result3 !== null) {
              var result1 = result3;
            } else {
              var result2 = parse_comment();
              if (result2 !== null) {
                var result1 = result2;
              } else {
                var result1 = null;;
              };
            };
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse_$() {
        var cacheKey = '$@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        var result4 = parse_whitespace();
        if (result4 !== null) {
          var result1 = result4;
        } else {
          var result3 = parse_linebreak();
          if (result3 !== null) {
            var result1 = result3;
          } else {
            var result2 = parse_comment();
            if (result2 !== null) {
              var result1 = result2;
            } else {
              var result1 = null;;
            };
          };
        }
        if (result1 !== null) {
          var result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            var result4 = parse_whitespace();
            if (result4 !== null) {
              var result1 = result4;
            } else {
              var result3 = parse_linebreak();
              if (result3 !== null) {
                var result1 = result3;
              } else {
                var result2 = parse_comment();
                if (result2 !== null) {
                  var result1 = result2;
                } else {
                  var result1 = null;;
                };
              };
            }
          }
        } else {
          var result0 = null;
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("whitespace");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function parse___unknown__() {
        var cacheKey = '__unknown__@' + pos;
        var cachedResult = cache[cacheKey];
        if (cachedResult) {
          pos = cachedResult.nextPos;
          return cachedResult.result;
        }
        
        var savedReportMatchFailures = reportMatchFailures;
        reportMatchFailures = false;
        if (input.length > pos) {
          var result0 = input.charAt(pos);
          pos++;
        } else {
          var result0 = null;
          if (reportMatchFailures) {
            matchFailed('any character');
          }
        }
        reportMatchFailures = savedReportMatchFailures;
        if (reportMatchFailures && result0 === null) {
          matchFailed("unknown character");
        }
        
        cache[cacheKey] = {
          nextPos: pos,
          result:  result0
        };
        return result0;
      }
      
      function buildErrorMessage() {
        function buildExpected(failuresExpected) {
          failuresExpected.sort();
          
          var lastFailure = null;
          var failuresExpectedUnique = [];
          for (var i = 0; i < failuresExpected.length; i++) {
            if (failuresExpected[i] !== lastFailure) {
              failuresExpectedUnique.push(failuresExpected[i]);
              lastFailure = failuresExpected[i];
            }
          }
          
          switch (failuresExpectedUnique.length) {
            case 0:
              return 'end of input';
            case 1:
              return failuresExpectedUnique[0];
            default:
              return failuresExpectedUnique.slice(0, failuresExpectedUnique.length - 1).join(', ')
                + ' or '
                + failuresExpectedUnique[failuresExpectedUnique.length - 1];
          }
        }
        
        var expected = buildExpected(rightmostMatchFailuresExpected);
        var actualPos = Math.max(pos, rightmostMatchFailuresPos);
        var actual = actualPos < input.length
          ? quote(input.charAt(actualPos))
          : 'end of input';
        
        return 'Expected ' + expected + ' but ' + actual + ' found.';
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i <  rightmostMatchFailuresPos; i++) {
          var ch = input.charAt(i);
          if (ch === '\n') {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      
        Q = {
      
            'flatten': function (xs) {
      
                if (xs instanceof Array) {
      
                    for (var i = 0; i < xs.length; i++) {
      
                        xs[i] = arguments.callee(xs[i]);
      
                    }
      
                    return xs.join('');
      
                } else {
      
                    return xs;
      
                }
      
            },
      
            'line': function () {
      
                // actually this workaround func can compute column
      
                var line = 1;
      
                var column = 1;
      
                var seenCR = false;
      
                for (var i = 0; i < pos; i++) {
      
                    var ch = input.charAt(i);
      
                    if (ch === '\n') {
      
                        if (!seenCR) { line++; }
      
                        column = 1;
      
                        seenCR = false;
      
                    } else if (ch === '\r' | ch === '\u2028' || ch === '\u2029') {
      
                        line++;
      
                        column = 1;
      
                        seenCR = true;
      
                    } else {
      
                        column++;
      
                        seenCR = false;
      
                    }
      
                }
      
                //return { line: line, column: column, pos: pos };
      
                return line;
      
            }
      
        };
      
    
      
        function SourceElements(x) {
      
            this.type = 'source_elements',
      
            this.line = Q.line();
      
            this.value = x;
      
        };
      
    
      
        function FunctionDecl(name, params, body) {
      
            this.type = 'function_decl';
      
            this.line = Q.line();
      
            this.value = [name, params, body];
      
        };
      
        
      
        function ParamList(params) {
      
            this.type = 'param_list';
      
            this.line = Q.line();
      
            this.value = (params === "") ? [] : params;
      
        };
      
    
      
        function IfStatement (cond, stmt, el) {
      
            this.type = 'if_stmt';
      
            this.line = Q.line();
      
            this.value = [cond, stmt, el];
      
        }
      
    
      
        function Unary(op, u) {
      
            this.type = "unary";
      
            this.line = Q.line();
      
            this.value = [op, u];
      
        }
      
    
      
        function Binary(op, l, r) {
      
            this.type = "binary";
      
            this.line = Q.line();
      
            this.value = [op, l, r];        
      
        }
      
    
      
        function ExpressionStatement(x) {
      
            this.type = "expression_stmt";
      
            this.line = Q.line();
      
            this.value = x;
      
        }
      
    
      
        function CallExpression(callee, args) {
      
            this.type = "call_expression";
      
            this.line = Q.line();
      
            this.value = [callee, args];        
      
        }
      
    
      
        function Arguments(args) {
      
            this.type = "arguments";
      
            this.line = Q.line();
      
            this.value = args;     
      
        }
      
    
      
        function WhileStatement(cond, stmt) {
      
            this.type = "while_stmt";
      
            this.line = Q.line();
      
            this.value = [cond, stmt];  
      
        }
      
    
      
        function StatementBlock(xs) {
      
            this.type = "stmt_block";
      
            this.line = Q.line();
      
            this.value = xs;  
      
        }
      
    
      
        function ForStatement(iter, init, end, step, stmt) {
      
            this.type = "for_stmt";
      
            this.line = Q.line();
      
            this.value = [iter, init, end, step, stmt];  
      
        }
      
    
      
        function EmptyStatement() {
      
            this.type = "empty_stmt";
      
            this.line = Q.line();
      
            // this.value = [];  
      
        }
      
    
      
        function DoWhileStatement(stmt, cond) {
      
            this.type = "do_while_stmt";
      
            this.line = Q.line();
      
            this.value = [stmt, cond];  
      
        }
      
    
      
        function ReturnStatement(ret) {
      
            this.type = "return_stmt";
      
            this.line = Q.line();
      
            this.value = ret;  
      
        }
      
    
      
        function BreakStatement() {
      
            this.type = "break_stmt";
      
            this.line = Q.line();
      
            // this.value = [];  
      
        }
      
    
      
        function ContinueStatement() {
      
            this.type = "continue_stmt";
      
            this.line = Q.line();
      
            // this.value = [];  
      
        }
      
    
      
        function Literal(x) {
      
            this.type = "literal";
      
            this.line = Q.line();
      
            this.value = x;
      
        }
      
    
      
        function Identifier(s) {
      
            this.type = "identifier";
      
            this.line = Q.line();
      
            this.value = s;
      
        }
      
    
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostMatchFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostMatchFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var errorPosition = computeErrorPosition();
        throw new this.SyntaxError(
          buildErrorMessage(),
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(message, line, column) {
    this.name = 'SyntaxError';
    this.message = message;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();
